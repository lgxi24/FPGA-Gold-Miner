
coursework_v1.elf:     file format elf32-littlenios2
coursework_v1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001bb4 memsz 0x00001bb4 flags r-x
    LOAD off    0x00002bd4 vaddr 0x00011bd4 paddr 0x00011c8c align 2**12
         filesz 0x000000b8 memsz 0x000000b8 flags rw-
    LOAD off    0x00002d44 vaddr 0x00011d44 paddr 0x00011d44 align 2**12
         filesz 0x00000000 memsz 0x00000450 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001894  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001c0  00011a14  00011a14  00002a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000b8  00011bd4  00011c8c  00002bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000450  00011d44  00011d44  00002d44  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012194  00012194  00002c8c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000440  00000000  00000000  00002cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004097  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b89  00000000  00000000  00007187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001cb2  00000000  00000000  00008d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000065c  00000000  00000000  0000a9c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000168e  00000000  00000000  0000b020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002091  00000000  00000000  0000c6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000e740  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000448  00000000  00000000  0000e750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001037e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00010381  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010385  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00010386  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001038f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000103a1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  000103ab  2**0
                  CONTENTS, READONLY
 26 .jdi          00004829  00000000  00000000  000103c5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006d378  00000000  00000000  00014bee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011a14 l    d  .rodata	00000000 .rodata
00011bd4 l    d  .rwdata	00000000 .rwdata
00011d44 l    d  .bss	00000000 .bss
00012194 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../coursework_v1_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00011a9a l     O .rodata	0000002b CSWTCH.25
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011be8 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011860 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00011d78 g     O .bss	00000004 alt_instruction_exception_handler
00011458 g     F .text	0000002c alt_main
00010520 g     F .text	00000018 led_write
00012094 g     O .bss	00000100 alt_irq
00011c8c g       *ABS*	00000000 __flash_rwdata_start
00010380 g     F .text	00000054 print
00010244 g     F .text	000000a0 getActualText
00010690 g     F .text	000000cc sys_timer_isr
00011c70 g     O .rwdata	00000004 jtag_uart
0001194c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011754 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011d7c g     O .bss	00000004 errno
00011d70 g     O .bss	00000004 alt_argv
00019c6c g       *ABS*	00000000 _gp
00011c14 g     O .rwdata	00000030 alt_fd_list
000118d4 g     F .text	00000074 alt_find_dev
00011bd4 g     O .rwdata	00000014 filter_coeffs
00011d48 g     O .bss	00000001 prevLetter
00011954 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00011d4c g     O .bss	00000004 button_data
0001166c g     F .text	0000005c altera_avalon_jtag_uart_read
00011d50 g     O .bss	00000004 length
00011c74 g     O .rwdata	00000004 alt_max_fd
000112e4 g     F .text	00000094 alt_irq_register
00012194 g       *ABS*	00000000 __bss_end
000112a0 g     F .text	00000044 alt_getchar
00011d68 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011c44 g     O .rwdata	00000028 alt_dev_null
0001185c g     F .text	00000004 alt_dcache_flush_all
00011c8c g       *ABS*	00000000 __ram_rwdata_end
000103d4 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011c78 g     O .rwdata	00000008 alt_dev_list
00011d94 g     O .bss	00000200 text
00011d54 g     O .bss	00000004 x_read
00011bd4 g       *ABS*	00000000 __ram_rodata_end
00011d58 g     O .bss	00000001 led
00012194 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011214 g     F .text	00000064 .hidden __clzsi2
000116c8 g     F .text	00000034 altera_avalon_jtag_uart_write
00011484 g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
00011d5c g     O .bss	00000004 level
0001165c g     F .text	00000010 alt_sys_init
00011704 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
000110f0 g     F .text	00000124 .hidden __floatsisf
000101bc g     F .text	00000088 getTxt
00011278 g     F .text	00000028 .hidden __mulsi3
00011bd4 g       *ABS*	00000000 __ram_rwdata_start
00011a14 g       *ABS*	00000000 __ram_rodata_start
000117ac g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
000119c8 g     F .text	00000030 memcmp
00012194 g       *ABS*	00000000 __alt_stack_base
00011868 g     F .text	0000006c alt_dev_llist_insert
00011f94 g     O .bss	00000100 enteredText
00011d60 g     O .bss	00000004 filtered_x_read
00011d44 g       *ABS*	00000000 __bss_start
0001075c g     F .text	0000009c main
00011d6c g     O .bss	00000004 alt_envp
00011c88 g     O .rwdata	00000004 alt_errno
00010cc0 g     F .text	00000430 .hidden __mulsf3
00011a14 g       *ABS*	00000000 __flash_rodata_start
0001163c g     F .text	00000020 alt_irq_init
00011ac5 g     O .rodata	00000100 .hidden __clz_tab
00011d74 g     O .bss	00000004 alt_argc
00010618 g     F .text	00000078 button_display
00010020 g       .exceptions	00000000 alt_irq_entry
00011d44 g     O .bss	00000001 pwm
00011c80 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000116fc g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011c8c g       *ABS*	00000000 _edata
00012194 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010444 g     F .text	000000dc SevenSegmentDisplay
00011804 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010538 g     F .text	00000034 convert_read
0001056c g     F .text	000000ac apply_filter
0001000c g       .entry	00000000 _exit
00011718 g     F .text	00000020 alt_up_accelerometer_spi_read
00011738 g     F .text	0000001c alt_up_accelerometer_spi_write
00010354 g     F .text	0000002c getBin
000119f8 g     F .text	0000001c strlen
000115f4 g     F .text	00000048 alt_putchar
00011948 g     F .text	00000004 alt_icache_flush_all
0001030c g     F .text	00000048 updateText
00011c6c g     O .rwdata	00000004 alt_priority_mask
00011d80 g     O .bss	00000014 filter_buffer
00011d64 g     O .bss	00000004 acc_dev
000107f8 g     F .text	000004c8 .hidden __addsf3
00011378 g     F .text	000000e0 alt_load
000102e4 g     F .text	00000028 clearActualText



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84082504 	addi	r16,r16,8340

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a04317 	ldw	r2,-32500(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a71b14 	ori	gp,gp,40044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10875114 	ori	r2,r2,7492

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c86514 	ori	r3,r3,8596

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00113780 	call	11378 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00114580 	call	11458 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <getTxt>:
		text[length-1] = '\0';		//Get rid of any extra stuff at the end
	return;
}

//Gets the text the user placed on the console
char getTxt(char curr){
   101bc:	2007883a 	mov	r3,r4
	if(curr == '\n')
   101c0:	21003fcc 	andi	r4,r4,255
   101c4:	2100201c 	xori	r4,r4,128
   101c8:	213fe004 	addi	r4,r4,-128
   101cc:	00800284 	movi	r2,10
   101d0:	20801a26 	beq	r4,r2,1023c <getTxt+0x80>
		text[length-1] = '\0';		//Get rid of any extra stuff at the end
	return;
}

//Gets the text the user placed on the console
char getTxt(char curr){
   101d4:	defffc04 	addi	sp,sp,-16
   101d8:	dc800215 	stw	r18,8(sp)
		return curr;
	int idx = 0;	//Keep track of what we are adding
	char newCurr = curr;
	//Keep adding characters until we get to the end of the line
	while (newCurr != '\n'){
		enteredText[idx] = newCurr;	//Add the next letter to the entered text register
   101dc:	04800074 	movhi	r18,1
		text[length-1] = '\0';		//Get rid of any extra stuff at the end
	return;
}

//Gets the text the user placed on the console
char getTxt(char curr){
   101e0:	dc400115 	stw	r17,4(sp)
   101e4:	dc000015 	stw	r16,0(sp)
   101e8:	dfc00315 	stw	ra,12(sp)
   101ec:	0021883a 	mov	r16,zero
		return curr;
	int idx = 0;	//Keep track of what we are adding
	char newCurr = curr;
	//Keep adding characters until we get to the end of the line
	while (newCurr != '\n'){
		enteredText[idx] = newCurr;	//Add the next letter to the entered text register
   101f0:	9487e504 	addi	r18,r18,8084
	if(curr == '\n')
		return curr;
	int idx = 0;	//Keep track of what we are adding
	char newCurr = curr;
	//Keep adding characters until we get to the end of the line
	while (newCurr != '\n'){
   101f4:	1023883a 	mov	r17,r2
		enteredText[idx] = newCurr;	//Add the next letter to the entered text register
   101f8:	8485883a 	add	r2,r16,r18
   101fc:	10c00005 	stb	r3,0(r2)
		idx ++;
		newCurr = alt_getchar();	//Get the next character
   10200:	00112a00 	call	112a0 <alt_getchar>
   10204:	1007883a 	mov	r3,r2
	if(curr == '\n')
		return curr;
	int idx = 0;	//Keep track of what we are adding
	char newCurr = curr;
	//Keep adding characters until we get to the end of the line
	while (newCurr != '\n'){
   10208:	10803fcc 	andi	r2,r2,255
   1020c:	1080201c 	xori	r2,r2,128
   10210:	10bfe004 	addi	r2,r2,-128
		enteredText[idx] = newCurr;	//Add the next letter to the entered text register
		idx ++;
   10214:	84000044 	addi	r16,r16,1
	if(curr == '\n')
		return curr;
	int idx = 0;	//Keep track of what we are adding
	char newCurr = curr;
	//Keep adding characters until we get to the end of the line
	while (newCurr != '\n'){
   10218:	147ff71e 	bne	r2,r17,101f8 <__alt_data_end+0xffff01f8>
		idx ++;
		newCurr = alt_getchar();	//Get the next character
	}
	length = idx;
	return newCurr;
}
   1021c:	00800284 	movi	r2,10
	while (newCurr != '\n'){
		enteredText[idx] = newCurr;	//Add the next letter to the entered text register
		idx ++;
		newCurr = alt_getchar();	//Get the next character
	}
	length = idx;
   10220:	d4203915 	stw	r16,-32540(gp)
	return newCurr;
}
   10224:	dfc00317 	ldw	ra,12(sp)
   10228:	dc800217 	ldw	r18,8(sp)
   1022c:	dc400117 	ldw	r17,4(sp)
   10230:	dc000017 	ldw	r16,0(sp)
   10234:	dec00404 	addi	sp,sp,16
   10238:	f800283a 	ret
   1023c:	00800284 	movi	r2,10
   10240:	f800283a 	ret

00010244 <getActualText>:
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10244:	d2603917 	ldw	r9,-32540(gp)
		currentLetter = enteredText[i];
   10248:	02800074 	movhi	r10,1
   1024c:	01400074 	movhi	r5,1
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10250:	0009883a 	mov	r4,zero
	length = idx;
	return newCurr;
}
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
   10254:	0005883a 	mov	r2,zero
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
		currentLetter = enteredText[i];
   10258:	5287e504 	addi	r10,r10,8084
		if (currentLetter > 96){
   1025c:	02c01804 	movi	r11,96
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   10260:	03001344 	movi	r12,77
   10264:	29476504 	addi	r5,r5,7572
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   10268:	01801384 	movi	r6,78
		currentLetter = enteredText[i];
		if (currentLetter > 96){
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   1026c:	034015c4 	movi	r13,87
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   10270:	01c01584 	movi	r7,86
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10274:	49001a16 	blt	r9,r4,102e0 <getActualText+0x9c>
		currentLetter = enteredText[i];
   10278:	2287883a 	add	r3,r4,r10
   1027c:	18c00003 	ldbu	r3,0(r3)
		if (currentLetter > 96){
   10280:	1a003fcc 	andi	r8,r3,255
   10284:	4200201c 	xori	r8,r8,128
   10288:	423fe004 	addi	r8,r8,-128
   1028c:	5a00010e 	bge	r11,r8,10294 <getActualText+0x50>
			//Gets only the uppercase letter
			currentLetter -= 32;
   10290:	18fff804 	addi	r3,r3,-32
		}
		switch(currentLetter){
   10294:	1a003fcc 	andi	r8,r3,255
   10298:	4200201c 	xori	r8,r8,128
   1029c:	423fe004 	addi	r8,r8,-128
   102a0:	43000526 	beq	r8,r12,102b8 <getActualText+0x74>
   102a4:	4340091e 	bne	r8,r13,102cc <getActualText+0x88>
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   102a8:	2887883a 	add	r3,r5,r2
   102ac:	19c00005 	stb	r7,0(r3)
			text[idx + 1] = 'V';
   102b0:	19c00045 	stb	r7,1(r3)
   102b4:	00000306 	br	102c4 <getActualText+0x80>
			currentLetter -= 32;
		}
		switch(currentLetter){
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   102b8:	2887883a 	add	r3,r5,r2
   102bc:	19800005 	stb	r6,0(r3)
			text[idx + 1] = 'N';
   102c0:	19800045 	stb	r6,1(r3)
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
			text[idx + 1] = 'V';
			idx += 2;
   102c4:	10800084 	addi	r2,r2,2
			break;
   102c8:	00000306 	br	102d8 <getActualText+0x94>
		default:
			//Copy the new letter into the actual text
			text[idx] = currentLetter;
   102cc:	2891883a 	add	r8,r5,r2
   102d0:	40c00005 	stb	r3,0(r8)
			idx++;
   102d4:	10800044 	addi	r2,r2,1
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   102d8:	21000044 	addi	r4,r4,1
   102dc:	003fe506 	br	10274 <__alt_data_end+0xffff0274>
		}


	}
	return idx;
}
   102e0:	f800283a 	ret

000102e4 <clearActualText>:
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   102e4:	d0e03917 	ldw	r3,-32540(gp)
		text[i] = '\0';
   102e8:	01000074 	movhi	r4,1
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   102ec:	0005883a 	mov	r2,zero
		text[i] = '\0';
   102f0:	21076504 	addi	r4,r4,7572
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   102f4:	18800416 	blt	r3,r2,10308 <clearActualText+0x24>
		text[i] = '\0';
   102f8:	110b883a 	add	r5,r2,r4
   102fc:	28000005 	stb	zero,0(r5)
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   10300:	10800044 	addi	r2,r2,1
   10304:	003ffb06 	br	102f4 <__alt_data_end+0xffff02f4>
		text[i] = '\0';
	}
	return;
}
   10308:	f800283a 	ret

0001030c <updateText>:
// initialisation for button display
int button_data;

// function for seven segment display
//Updates the text from the console once the program is running
void updateText(){
   1030c:	deffff04 	addi	sp,sp,-4
   10310:	dfc00015 	stw	ra,0(sp)
	clearActualText();	//Clear the text from the display
   10314:	00102e40 	call	102e4 <clearActualText>
	// alt_putstr("Put your new text into the console and press ENTER\n");
	prevLetter = '!';
   10318:	00800844 	movi	r2,33
	prevLetter = getTxt(prevLetter);
   1031c:	01000844 	movi	r4,33
// function for seven segment display
//Updates the text from the console once the program is running
void updateText(){
	clearActualText();	//Clear the text from the display
	// alt_putstr("Put your new text into the console and press ENTER\n");
	prevLetter = '!';
   10320:	d0a03705 	stb	r2,-32548(gp)
	prevLetter = getTxt(prevLetter);
   10324:	00101bc0 	call	101bc <getTxt>
   10328:	d0a03705 	stb	r2,-32548(gp)
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
   1032c:	00102440 	call	10244 <getActualText>
   10330:	d0a03915 	stw	r2,-32540(gp)
	if(length > 0)
   10334:	0080040e 	bge	zero,r2,10348 <updateText+0x3c>
		text[length-1] = '\0';		//Get rid of any extra stuff at the end
   10338:	00c00074 	movhi	r3,1
   1033c:	18c764c4 	addi	r3,r3,7571
   10340:	10c5883a 	add	r2,r2,r3
   10344:	10000005 	stb	zero,0(r2)
	return;
}
   10348:	dfc00017 	ldw	ra,0(sp)
   1034c:	dec00104 	addi	sp,sp,4
   10350:	f800283a 	ret

00010354 <getBin>:
	}
	return;
}

//Gets the binary representation of the character
int getBin(char letter){
   10354:	213ff404 	addi	r4,r4,-48
   10358:	21003fcc 	andi	r4,r4,255
   1035c:	00800a84 	movi	r2,42
   10360:	11000536 	bltu	r2,r4,10378 <getBin+0x24>
   10364:	00800074 	movhi	r2,1
   10368:	1086a684 	addi	r2,r2,6810
   1036c:	1109883a 	add	r4,r2,r4
   10370:	20800007 	ldb	r2,0(r4)
   10374:	f800283a 	ret
	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
	for the 7-segment is shown in the DE0_C5 User Manual*/
	switch(letter){
   10378:	00801fc4 	movi	r2,127
	case 'Z':
		return 0b0100100;
	default:
		return 0b1111111;
	}
}
   1037c:	f800283a 	ret

00010380 <print>:

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10380:	008000b4 	movhi	r2,2
   10384:	10840804 	addi	r2,r2,4128
   10388:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   1038c:	008000b4 	movhi	r2,2
   10390:	10840c04 	addi	r2,r2,4144
   10394:	11400035 	stwio	r5,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10398:	008000b4 	movhi	r2,2
   1039c:	10841004 	addi	r2,r2,4160
   103a0:	11800035 	stwio	r6,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   103a4:	008000b4 	movhi	r2,2
   103a8:	10841404 	addi	r2,r2,4176
   103ac:	11c00035 	stwio	r7,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   103b0:	d8c00017 	ldw	r3,0(sp)
   103b4:	008000b4 	movhi	r2,2
   103b8:	10841804 	addi	r2,r2,4192
   103bc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   103c0:	d8c00117 	ldw	r3,4(sp)
   103c4:	008000b4 	movhi	r2,2
   103c8:	10841c04 	addi	r2,r2,4208
   103cc:	10c00035 	stwio	r3,0(r2)
   103d0:	f800283a 	ret

000103d4 <timer_init>:
	return;
}

void timer_init(void * isr) {
   103d4:	defffe04 	addi	sp,sp,-8
   103d8:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   103dc:	040000b4 	movhi	r16,2
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}

void timer_init(void * isr) {
   103e0:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   103e4:	84040104 	addi	r16,r16,4100
   103e8:	008000c4 	movi	r2,3
   103ec:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   103f0:	00c000b4 	movhi	r3,2
   103f4:	0005883a 	mov	r2,zero
   103f8:	18c40004 	addi	r3,r3,4096
   103fc:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x9000);
   10400:	00c000b4 	movhi	r3,2
   10404:	18c40204 	addi	r3,r3,4104
   10408:	01640014 	movui	r5,36864
   1040c:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10410:	00c000b4 	movhi	r3,2
   10414:	18c40304 	addi	r3,r3,4108
   10418:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   1041c:	200d883a 	mov	r6,r4
   10420:	000b883a 	mov	r5,zero
   10424:	01000084 	movi	r4,2
   10428:	00112e40 	call	112e4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   1042c:	008001c4 	movi	r2,7
   10430:	80800035 	stwio	r2,0(r16)
}
   10434:	dfc00117 	ldw	ra,4(sp)
   10438:	dc000017 	ldw	r16,0(sp)
   1043c:	dec00204 	addi	sp,sp,8
   10440:	f800283a 	ret

00010444 <SevenSegmentDisplay>:

void SevenSegmentDisplay() {
   10444:	defff904 	addi	sp,sp,-28
   10448:	dc000015 	stw	r16,0(sp)
    // Update the text if required (when re-enter is triggered)
    updateText();
	// alt_printf("Text: %s\n", 'about to print');
    // Display the current text on the 7-segment display
    print(getBin(text[1]), getBin(text[2]), getBin(text[3]), getBin(text[4]), getBin(text[5]), getBin(text[6]));
   1044c:	04000074 	movhi	r16,1
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

void SevenSegmentDisplay() {
   10450:	dfc00615 	stw	ra,24(sp)
    // Update the text if required (when re-enter is triggered)
    updateText();
	// alt_printf("Text: %s\n", 'about to print');
    // Display the current text on the 7-segment display
    print(getBin(text[1]), getBin(text[2]), getBin(text[3]), getBin(text[4]), getBin(text[5]), getBin(text[6]));
   10454:	84076504 	addi	r16,r16,7572
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

void SevenSegmentDisplay() {
   10458:	dd400515 	stw	r21,20(sp)
   1045c:	dd000415 	stw	r20,16(sp)
   10460:	dcc00315 	stw	r19,12(sp)
   10464:	dc800215 	stw	r18,8(sp)
   10468:	dc400115 	stw	r17,4(sp)
    // Update the text if required (when re-enter is triggered)
    updateText();
   1046c:	001030c0 	call	1030c <updateText>
	// alt_printf("Text: %s\n", 'about to print');
    // Display the current text on the 7-segment display
    print(getBin(text[1]), getBin(text[2]), getBin(text[3]), getBin(text[4]), getBin(text[5]), getBin(text[6]));
   10470:	81000047 	ldb	r4,1(r16)
   10474:	00103540 	call	10354 <getBin>
   10478:	81000087 	ldb	r4,2(r16)
   1047c:	102b883a 	mov	r21,r2
   10480:	00103540 	call	10354 <getBin>
   10484:	810000c7 	ldb	r4,3(r16)
   10488:	1029883a 	mov	r20,r2
   1048c:	00103540 	call	10354 <getBin>
   10490:	81000107 	ldb	r4,4(r16)
   10494:	1027883a 	mov	r19,r2
   10498:	00103540 	call	10354 <getBin>
   1049c:	81000147 	ldb	r4,5(r16)
   104a0:	1025883a 	mov	r18,r2
   104a4:	00103540 	call	10354 <getBin>
   104a8:	81000187 	ldb	r4,6(r16)
   104ac:	1023883a 	mov	r17,r2
   104b0:	00103540 	call	10354 <getBin>
}

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   104b4:	00c000b4 	movhi	r3,2
   104b8:	18c40804 	addi	r3,r3,4128
   104bc:	1d400035 	stwio	r21,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   104c0:	00c000b4 	movhi	r3,2
   104c4:	18c40c04 	addi	r3,r3,4144
   104c8:	1d000035 	stwio	r20,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   104cc:	00c000b4 	movhi	r3,2
   104d0:	18c41004 	addi	r3,r3,4160
   104d4:	1cc00035 	stwio	r19,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   104d8:	00c000b4 	movhi	r3,2
   104dc:	18c41404 	addi	r3,r3,4176
   104e0:	1c800035 	stwio	r18,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   104e4:	00c000b4 	movhi	r3,2
   104e8:	18c41804 	addi	r3,r3,4192
   104ec:	1c400035 	stwio	r17,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   104f0:	00c000b4 	movhi	r3,2
   104f4:	18c41c04 	addi	r3,r3,4208
   104f8:	18800035 	stwio	r2,0(r3)
    // Update the text if required (when re-enter is triggered)
    updateText();
	// alt_printf("Text: %s\n", 'about to print');
    // Display the current text on the 7-segment display
    print(getBin(text[1]), getBin(text[2]), getBin(text[3]), getBin(text[4]), getBin(text[5]), getBin(text[6]));
}
   104fc:	dfc00617 	ldw	ra,24(sp)
   10500:	dd400517 	ldw	r21,20(sp)
   10504:	dd000417 	ldw	r20,16(sp)
   10508:	dcc00317 	ldw	r19,12(sp)
   1050c:	dc800217 	ldw	r18,8(sp)
   10510:	dc400117 	ldw	r17,4(sp)
   10514:	dc000017 	ldw	r16,0(sp)
   10518:	dec00704 	addi	sp,sp,28
   1051c:	f800283a 	ret

00010520 <led_write>:
void led_write(alt_u8 accelerometer_pattern, int button_datain) {
    //convert accelerometer pattern to int
    int acceleromter_pattern_int = (int)accelerometer_pattern;
    //OR the two patterns
    int or_pattern = acceleromter_pattern_int | button_datain;
    IOWR(LED_BASE, 0, or_pattern);
   10520:	21003fcc 	andi	r4,r4,255
   10524:	008000b4 	movhi	r2,2
   10528:	214ab03a 	or	r5,r4,r5
   1052c:	10842004 	addi	r2,r2,4224
   10530:	11400035 	stwio	r5,0(r2)
   10534:	f800283a 	ret

00010538 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10538:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1053c:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10540:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10544:	10c001cc 	andi	r3,r2,7
   10548:	00800204 	movi	r2,8
   1054c:	10cfc83a 	sub	r7,r2,r3
   10550:	11ce983a 	sll	r7,r2,r7
   10554:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10558:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1055c:	3884b03a 	or	r2,r7,r2
   10560:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   10564:	29000015 	stw	r4,0(r5)
   10568:	f800283a 	ret

0001056c <apply_filter>:
}

float apply_filter(alt_32 new_reading) {
   1056c:	defffa04 	addi	sp,sp,-24
   10570:	dc000015 	stw	r16,0(sp)
    // Shift the old samples
    for (int i = N_TAPS - 1; i > 0; i--) {
        filter_buffer[i] = filter_buffer[i - 1];
   10574:	04000074 	movhi	r16,1
   10578:	84076004 	addi	r16,r16,7552
   1057c:	80800317 	ldw	r2,12(r16)
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

float apply_filter(alt_32 new_reading) {
   10580:	dd000415 	stw	r20,16(sp)
   10584:	dcc00315 	stw	r19,12(sp)
    // Shift the old samples
    for (int i = N_TAPS - 1; i > 0; i--) {
        filter_buffer[i] = filter_buffer[i - 1];
   10588:	80800415 	stw	r2,16(r16)
   1058c:	80800217 	ldw	r2,8(r16)
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

float apply_filter(alt_32 new_reading) {
   10590:	dc800215 	stw	r18,8(sp)
   10594:	dc400115 	stw	r17,4(sp)
    // Shift the old samples
    for (int i = N_TAPS - 1; i > 0; i--) {
        filter_buffer[i] = filter_buffer[i - 1];
   10598:	80800315 	stw	r2,12(r16)
   1059c:	80800117 	ldw	r2,4(r16)
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

float apply_filter(alt_32 new_reading) {
   105a0:	dfc00515 	stw	ra,20(sp)
    filter_buffer[0] = (float)new_reading;

    // Apply the filter
    float filtered_value = 0;
    for (int i = 0; i < N_TAPS; i++) {
        filtered_value += filter_buffer[i] * filter_coeffs[i];
   105a4:	05000074 	movhi	r20,1
}

float apply_filter(alt_32 new_reading) {
    // Shift the old samples
    for (int i = N_TAPS - 1; i > 0; i--) {
        filter_buffer[i] = filter_buffer[i - 1];
   105a8:	80800215 	stw	r2,8(r16)
   105ac:	80800017 	ldw	r2,0(r16)
    }

    // Add the new sample
    filter_buffer[0] = (float)new_reading;
   105b0:	0023883a 	mov	r17,zero

    // Apply the filter
    float filtered_value = 0;
   105b4:	0025883a 	mov	r18,zero
}

float apply_filter(alt_32 new_reading) {
    // Shift the old samples
    for (int i = N_TAPS - 1; i > 0; i--) {
        filter_buffer[i] = filter_buffer[i - 1];
   105b8:	80800115 	stw	r2,4(r16)
    }

    // Add the new sample
    filter_buffer[0] = (float)new_reading;
   105bc:	00110f00 	call	110f0 <__floatsisf>
   105c0:	80800015 	stw	r2,0(r16)

    // Apply the filter
    float filtered_value = 0;
    for (int i = 0; i < N_TAPS; i++) {
        filtered_value += filter_buffer[i] * filter_coeffs[i];
   105c4:	a506f504 	addi	r20,r20,7124
    // Add the new sample
    filter_buffer[0] = (float)new_reading;

    // Apply the filter
    float filtered_value = 0;
    for (int i = 0; i < N_TAPS; i++) {
   105c8:	04c00504 	movi	r19,20
        filtered_value += filter_buffer[i] * filter_coeffs[i];
   105cc:	8d07883a 	add	r3,r17,r20
   105d0:	8c05883a 	add	r2,r17,r16
   105d4:	19400017 	ldw	r5,0(r3)
   105d8:	11000017 	ldw	r4,0(r2)
   105dc:	8c400104 	addi	r17,r17,4
   105e0:	0010cc00 	call	10cc0 <__mulsf3>
   105e4:	9009883a 	mov	r4,r18
   105e8:	100b883a 	mov	r5,r2
   105ec:	00107f80 	call	107f8 <__addsf3>
   105f0:	1025883a 	mov	r18,r2
    // Add the new sample
    filter_buffer[0] = (float)new_reading;

    // Apply the filter
    float filtered_value = 0;
    for (int i = 0; i < N_TAPS; i++) {
   105f4:	8cfff51e 	bne	r17,r19,105cc <__alt_data_end+0xffff05cc>
        filtered_value += filter_buffer[i] * filter_coeffs[i];
    }

    return filtered_value;
}
   105f8:	dfc00517 	ldw	ra,20(sp)
   105fc:	dd000417 	ldw	r20,16(sp)
   10600:	dcc00317 	ldw	r19,12(sp)
   10604:	dc800217 	ldw	r18,8(sp)
   10608:	dc400117 	ldw	r17,4(sp)
   1060c:	dc000017 	ldw	r16,0(sp)
   10610:	dec00604 	addi	sp,sp,24
   10614:	f800283a 	ret

00010618 <button_display>:
// function for button display
int button_display() {
    int button_datain; // Variable to store the input from the buttons

    // Gets the data from the push button, recall that a 0 means the button is pressed
    button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10618:	008000b4 	movhi	r2,2
    convert_read(x_read, & level, & led);

}

// function for button display
int button_display() {
   1061c:	defffe04 	addi	sp,sp,-8
    int button_datain; // Variable to store the input from the buttons

    // Gets the data from the push button, recall that a 0 means the button is pressed
    button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10620:	10842804 	addi	r2,r2,4256
    convert_read(x_read, & level, & led);

}

// function for button display
int button_display() {
   10624:	dfc00115 	stw	ra,4(sp)
   10628:	dc000015 	stw	r16,0(sp)
    int button_datain; // Variable to store the input from the buttons

    // Gets the data from the push button, recall that a 0 means the button is pressed
    button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   1062c:	14000037 	ldwio	r16,0(r2)
    // Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
    button_datain &= (0b0000000011);

    // Shift the bits to correspond to the LEDs
    button_datain = button_datain << 8;
    if (button_datain == 0x100)
   10630:	00804004 	movi	r2,256
// function for button display
int button_display() {
    int button_datain; // Variable to store the input from the buttons

    // Gets the data from the push button, recall that a 0 means the button is pressed
    button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10634:	0420303a 	nor	r16,zero,r16

    // Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
    button_datain &= (0b0000000011);
   10638:	840000cc 	andi	r16,r16,3

    // Shift the bits to correspond to the LEDs
    button_datain = button_datain << 8;
   1063c:	8020923a 	slli	r16,r16,8
    if (button_datain == 0x100)
   10640:	8080031e 	bne	r16,r2,10650 <button_display+0x38>
        alt_printf("Button Status: %s\n", "key0");
   10644:	01400074 	movhi	r5,1
   10648:	29468504 	addi	r5,r5,6676
   1064c:	00000406 	br	10660 <button_display+0x48>
    else if (button_datain == 0x200)
   10650:	00808004 	movi	r2,512
   10654:	8080061e 	bne	r16,r2,10670 <button_display+0x58>
        alt_printf("Button Status: %s\n", "key1");
   10658:	01400074 	movhi	r5,1
   1065c:	29468c04 	addi	r5,r5,6704
   10660:	01000074 	movhi	r4,1
   10664:	21068704 	addi	r4,r4,6684
   10668:	00114840 	call	11484 <alt_printf>
   1066c:	00000306 	br	1067c <button_display+0x64>
    else{
    alt_printf("Button Status: key N/A\n");
   10670:	01000074 	movhi	r4,1
   10674:	21068e04 	addi	r4,r4,6712
   10678:	00114840 	call	11484 <alt_printf>
    }

    return button_datain;
    // Send the data to the LED
    // IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, button_datain);
}
   1067c:	8005883a 	mov	r2,r16
   10680:	dfc00117 	ldw	ra,4(sp)
   10684:	dc000017 	ldw	r16,0(sp)
   10688:	dec00204 	addi	sp,sp,8
   1068c:	f800283a 	ret

00010690 <sys_timer_isr>:
    }

    return filtered_value;
}

void sys_timer_isr() {
   10690:	deffff04 	addi	sp,sp,-4
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10694:	008000b4 	movhi	r2,2
    }

    return filtered_value;
}

void sys_timer_isr() {
   10698:	dfc00015 	stw	ra,0(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1069c:	10840004 	addi	r2,r2,4096
   106a0:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   106a4:	d0e03c17 	ldw	r3,-32528(gp)
   106a8:	d1a03607 	ldb	r6,-32552(gp)
   106ac:	1800020e 	bge	r3,zero,106b8 <sys_timer_isr+0x28>
   106b0:	00cbc83a 	sub	r5,zero,r3
   106b4:	00000106 	br	106bc <sys_timer_isr+0x2c>
   106b8:	180b883a 	mov	r5,r3
   106bc:	010000b4 	movhi	r4,2
   106c0:	d0a03817 	ldw	r2,-32544(gp)
   106c4:	21042004 	addi	r4,r4,4224
   106c8:	3140080e 	bge	r6,r5,106ec <sys_timer_isr+0x5c>

        if (level < 0) {
   106cc:	1800040e 	bge	r3,zero,106e0 <sys_timer_isr+0x50>
void led_write(alt_u8 accelerometer_pattern, int button_datain) {
    //convert accelerometer pattern to int
    int acceleromter_pattern_int = (int)accelerometer_pattern;
    //OR the two patterns
    int or_pattern = acceleromter_pattern_int | button_datain;
    IOWR(LED_BASE, 0, or_pattern);
   106d0:	d0e03b03 	ldbu	r3,-32532(gp)
   106d4:	18c7883a 	add	r3,r3,r3
   106d8:	18c03fcc 	andi	r3,r3,255
   106dc:	00000406 	br	106f0 <sys_timer_isr+0x60>
   106e0:	d0e03b03 	ldbu	r3,-32532(gp)
   106e4:	1806d07a 	srli	r3,r3,1
   106e8:	00000106 	br	106f0 <sys_timer_isr+0x60>
   106ec:	d0e03b03 	ldbu	r3,-32532(gp)
   106f0:	1884b03a 	or	r2,r3,r2
   106f4:	20800035 	stwio	r2,0(r4)

    } else {
        led_write(led, button_data);
    }

    if (pwm > PWM_PERIOD) {
   106f8:	d0a03603 	ldbu	r2,-32552(gp)
   106fc:	01000404 	movi	r4,16
   10700:	10c03fcc 	andi	r3,r2,255
   10704:	18c0201c 	xori	r3,r3,128
   10708:	18ffe004 	addi	r3,r3,-128
   1070c:	20c0020e 	bge	r4,r3,10718 <sys_timer_isr+0x88>
        pwm = 0;
   10710:	d0203605 	stb	zero,-32552(gp)
   10714:	00000206 	br	10720 <sys_timer_isr+0x90>
    } else {
        pwm++;
   10718:	10800044 	addi	r2,r2,1
   1071c:	d0a03605 	stb	r2,-32552(gp)
    }

	// Read the button
	button_data = button_display();
   10720:	00106180 	call	10618 <button_display>
	// Read the accelerometer
    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10724:	d1203e17 	ldw	r4,-32520(gp)
   10728:	d1603a04 	addi	r5,gp,-32536
    } else {
        pwm++;
    }

	// Read the button
	button_data = button_display();
   1072c:	d0a03815 	stw	r2,-32544(gp)
	// Read the accelerometer
    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10730:	00117540 	call	11754 <alt_up_accelerometer_spi_read_x_axis>
    alt_printf("raw data: %x ", x_read);
   10734:	d1603a17 	ldw	r5,-32536(gp)
   10738:	01000074 	movhi	r4,1
   1073c:	21069404 	addi	r4,r4,6736
   10740:	00114840 	call	11484 <alt_printf>

    // Apply the filter
//    filtered_x_read = (alt_32)apply_filter(x_read);
//    alt_printf("filtered data: %x\n", filtered_x_read);
    convert_read(x_read, & level, & led);
   10744:	d1203a17 	ldw	r4,-32536(gp)
   10748:	d1a03b04 	addi	r6,gp,-32532
   1074c:	d1603c04 	addi	r5,gp,-32528

}
   10750:	dfc00017 	ldw	ra,0(sp)
   10754:	dec00104 	addi	sp,sp,4
    alt_printf("raw data: %x ", x_read);

    // Apply the filter
//    filtered_x_read = (alt_32)apply_filter(x_read);
//    alt_printf("filtered data: %x\n", filtered_x_read);
    convert_read(x_read, & level, & led);
   10758:	00105381 	jmpi	10538 <convert_read>

0001075c <main>:
}


int main() {
//    alt_putstr("Hello from Nios II!\n");
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1075c:	01000074 	movhi	r4,1
    // Send the data to the LED
    // IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, button_datain);
}


int main() {
   10760:	deffff04 	addi	sp,sp,-4
//    alt_putstr("Hello from Nios II!\n");
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10764:	21069804 	addi	r4,r4,6752
    // Send the data to the LED
    // IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, button_datain);
}


int main() {
   10768:	dfc00015 	stw	ra,0(sp)
//    alt_putstr("Hello from Nios II!\n");
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1076c:	00116fc0 	call	116fc <alt_up_accelerometer_spi_open_dev>
}

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10770:	00c000b4 	movhi	r3,2
}


int main() {
//    alt_putstr("Hello from Nios II!\n");
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10774:	d0a03e15 	stw	r2,-32520(gp)
}

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10778:	18c40804 	addi	r3,r3,4128
   1077c:	00801fc4 	movi	r2,127
   10780:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10784:	00c000b4 	movhi	r3,2
   10788:	18c40c04 	addi	r3,r3,4144
   1078c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10790:	00c000b4 	movhi	r3,2
   10794:	18c41004 	addi	r3,r3,4160
   10798:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   1079c:	00c000b4 	movhi	r3,2
   107a0:	18c41404 	addi	r3,r3,4176
   107a4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   107a8:	00c000b4 	movhi	r3,2
   107ac:	18c41804 	addi	r3,r3,4192
   107b0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   107b4:	00c000b4 	movhi	r3,2
   107b8:	18c41c04 	addi	r3,r3,4208
   107bc:	18800035 	stwio	r2,0(r3)
int main() {
//    alt_putstr("Hello from Nios II!\n");
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));

    if (acc_dev == NULL) {
   107c0:	d0a03e17 	ldw	r2,-32520(gp)
   107c4:	10000526 	beq	r2,zero,107dc <main+0x80>
        alt_printf("Error: could not open acc device\n");
        return 1;
    }

    timer_init(sys_timer_isr);
   107c8:	01000074 	movhi	r4,1
   107cc:	2101a404 	addi	r4,r4,1680
   107d0:	00103d40 	call	103d4 <timer_init>

    while (1) {
        SevenSegmentDisplay();
   107d4:	00104440 	call	10444 <SevenSegmentDisplay>
   107d8:	003ffe06 	br	107d4 <__alt_data_end+0xffff07d4>
//    alt_putstr("Hello from Nios II!\n");
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));

    if (acc_dev == NULL) {
        alt_printf("Error: could not open acc device\n");
   107dc:	01000074 	movhi	r4,1
   107e0:	21069e04 	addi	r4,r4,6776
   107e4:	00114840 	call	11484 <alt_printf>
    while (1) {
        SevenSegmentDisplay();
    }

    return 0;
}
   107e8:	00800044 	movi	r2,1
   107ec:	dfc00017 	ldw	ra,0(sp)
   107f0:	dec00104 	addi	sp,sp,4
   107f4:	f800283a 	ret

000107f8 <__addsf3>:
   107f8:	defffc04 	addi	sp,sp,-16
   107fc:	2004d7fa 	srli	r2,r4,31
   10800:	280cd5fa 	srli	r6,r5,23
   10804:	dc000015 	stw	r16,0(sp)
   10808:	00c02034 	movhi	r3,128
   1080c:	2020d5fa 	srli	r16,r4,23
   10810:	280ed7fa 	srli	r7,r5,31
   10814:	18ffffc4 	addi	r3,r3,-1
   10818:	dc400115 	stw	r17,4(sp)
   1081c:	1908703a 	and	r4,r3,r4
   10820:	194a703a 	and	r5,r3,r5
   10824:	dfc00315 	stw	ra,12(sp)
   10828:	dc800215 	stw	r18,8(sp)
   1082c:	14403fcc 	andi	r17,r2,255
   10830:	84003fcc 	andi	r16,r16,255
   10834:	200890fa 	slli	r4,r4,3
   10838:	31803fcc 	andi	r6,r6,255
   1083c:	280a90fa 	slli	r5,r5,3
   10840:	89c05026 	beq	r17,r7,10984 <__addsf3+0x18c>
   10844:	8185c83a 	sub	r2,r16,r6
   10848:	00807a0e 	bge	zero,r2,10a34 <__addsf3+0x23c>
   1084c:	30001e1e 	bne	r6,zero,108c8 <__addsf3+0xd0>
   10850:	28006d1e 	bne	r5,zero,10a08 <__addsf3+0x210>
   10854:	208001cc 	andi	r2,r4,7
   10858:	10000426 	beq	r2,zero,1086c <__addsf3+0x74>
   1085c:	208003cc 	andi	r2,r4,15
   10860:	00c00104 	movi	r3,4
   10864:	10c00126 	beq	r2,r3,1086c <__addsf3+0x74>
   10868:	20c9883a 	add	r4,r4,r3
   1086c:	2081002c 	andhi	r2,r4,1024
   10870:	10003926 	beq	r2,zero,10958 <__addsf3+0x160>
   10874:	84000044 	addi	r16,r16,1
   10878:	00803fc4 	movi	r2,255
   1087c:	80807826 	beq	r16,r2,10a60 <__addsf3+0x268>
   10880:	200891ba 	slli	r4,r4,6
   10884:	8805883a 	mov	r2,r17
   10888:	2008d27a 	srli	r4,r4,9
   1088c:	84003fcc 	andi	r16,r16,255
   10890:	800695fa 	slli	r3,r16,23
   10894:	10803fcc 	andi	r2,r2,255
   10898:	04002034 	movhi	r16,128
   1089c:	843fffc4 	addi	r16,r16,-1
   108a0:	100497fa 	slli	r2,r2,31
   108a4:	2408703a 	and	r4,r4,r16
   108a8:	20e0b03a 	or	r16,r4,r3
   108ac:	8084b03a 	or	r2,r16,r2
   108b0:	dfc00317 	ldw	ra,12(sp)
   108b4:	dc800217 	ldw	r18,8(sp)
   108b8:	dc400117 	ldw	r17,4(sp)
   108bc:	dc000017 	ldw	r16,0(sp)
   108c0:	dec00404 	addi	sp,sp,16
   108c4:	f800283a 	ret
   108c8:	00c03fc4 	movi	r3,255
   108cc:	80ffe126 	beq	r16,r3,10854 <__alt_data_end+0xffff0854>
   108d0:	29410034 	orhi	r5,r5,1024
   108d4:	00c006c4 	movi	r3,27
   108d8:	18807516 	blt	r3,r2,10ab0 <__addsf3+0x2b8>
   108dc:	00c00804 	movi	r3,32
   108e0:	1887c83a 	sub	r3,r3,r2
   108e4:	28c6983a 	sll	r3,r5,r3
   108e8:	288ad83a 	srl	r5,r5,r2
   108ec:	1804c03a 	cmpne	r2,r3,zero
   108f0:	288ab03a 	or	r5,r5,r2
   108f4:	2149c83a 	sub	r4,r4,r5
   108f8:	2081002c 	andhi	r2,r4,1024
   108fc:	10001426 	beq	r2,zero,10950 <__addsf3+0x158>
   10900:	04810034 	movhi	r18,1024
   10904:	94bfffc4 	addi	r18,r18,-1
   10908:	24a4703a 	and	r18,r4,r18
   1090c:	9009883a 	mov	r4,r18
   10910:	00112140 	call	11214 <__clzsi2>
   10914:	10bffec4 	addi	r2,r2,-5
   10918:	90a4983a 	sll	r18,r18,r2
   1091c:	14005416 	blt	r2,r16,10a70 <__addsf3+0x278>
   10920:	1405c83a 	sub	r2,r2,r16
   10924:	11000044 	addi	r4,r2,1
   10928:	00800804 	movi	r2,32
   1092c:	1105c83a 	sub	r2,r2,r4
   10930:	9084983a 	sll	r2,r18,r2
   10934:	9124d83a 	srl	r18,r18,r4
   10938:	0021883a 	mov	r16,zero
   1093c:	1008c03a 	cmpne	r4,r2,zero
   10940:	9108b03a 	or	r4,r18,r4
   10944:	003fc306 	br	10854 <__alt_data_end+0xffff0854>
   10948:	1000db26 	beq	r2,zero,10cb8 <__addsf3+0x4c0>
   1094c:	1009883a 	mov	r4,r2
   10950:	208001cc 	andi	r2,r4,7
   10954:	103fc11e 	bne	r2,zero,1085c <__alt_data_end+0xffff085c>
   10958:	2006d0fa 	srli	r3,r4,3
   1095c:	01003fc4 	movi	r4,255
   10960:	8805883a 	mov	r2,r17
   10964:	8100241e 	bne	r16,r4,109f8 <__addsf3+0x200>
   10968:	18006e26 	beq	r3,zero,10b24 <__addsf3+0x32c>
   1096c:	19001034 	orhi	r4,r3,64
   10970:	00c02034 	movhi	r3,128
   10974:	18ffffc4 	addi	r3,r3,-1
   10978:	043fffc4 	movi	r16,-1
   1097c:	20c8703a 	and	r4,r4,r3
   10980:	003fc206 	br	1088c <__alt_data_end+0xffff088c>
   10984:	8187c83a 	sub	r3,r16,r6
   10988:	00c03e0e 	bge	zero,r3,10a84 <__addsf3+0x28c>
   1098c:	30002326 	beq	r6,zero,10a1c <__addsf3+0x224>
   10990:	01803fc4 	movi	r6,255
   10994:	81bfaf26 	beq	r16,r6,10854 <__alt_data_end+0xffff0854>
   10998:	29410034 	orhi	r5,r5,1024
   1099c:	018006c4 	movi	r6,27
   109a0:	30c07416 	blt	r6,r3,10b74 <__addsf3+0x37c>
   109a4:	01800804 	movi	r6,32
   109a8:	30cdc83a 	sub	r6,r6,r3
   109ac:	298c983a 	sll	r6,r5,r6
   109b0:	28cad83a 	srl	r5,r5,r3
   109b4:	3006c03a 	cmpne	r3,r6,zero
   109b8:	28cab03a 	or	r5,r5,r3
   109bc:	2149883a 	add	r4,r4,r5
   109c0:	20c1002c 	andhi	r3,r4,1024
   109c4:	183fe226 	beq	r3,zero,10950 <__alt_data_end+0xffff0950>
   109c8:	84000044 	addi	r16,r16,1
   109cc:	00c03fc4 	movi	r3,255
   109d0:	80c05426 	beq	r16,r3,10b24 <__addsf3+0x32c>
   109d4:	00bf0034 	movhi	r2,64512
   109d8:	10bfffc4 	addi	r2,r2,-1
   109dc:	20c0004c 	andi	r3,r4,1
   109e0:	2088703a 	and	r4,r4,r2
   109e4:	2008d07a 	srli	r4,r4,1
   109e8:	20c8b03a 	or	r4,r4,r3
   109ec:	003f9906 	br	10854 <__alt_data_end+0xffff0854>
   109f0:	0007883a 	mov	r3,zero
   109f4:	0005883a 	mov	r2,zero
   109f8:	01002034 	movhi	r4,128
   109fc:	213fffc4 	addi	r4,r4,-1
   10a00:	1908703a 	and	r4,r3,r4
   10a04:	003fa106 	br	1088c <__alt_data_end+0xffff088c>
   10a08:	10bfffc4 	addi	r2,r2,-1
   10a0c:	103fb926 	beq	r2,zero,108f4 <__alt_data_end+0xffff08f4>
   10a10:	00c03fc4 	movi	r3,255
   10a14:	80ffaf1e 	bne	r16,r3,108d4 <__alt_data_end+0xffff08d4>
   10a18:	003f8e06 	br	10854 <__alt_data_end+0xffff0854>
   10a1c:	283f8d26 	beq	r5,zero,10854 <__alt_data_end+0xffff0854>
   10a20:	18ffffc4 	addi	r3,r3,-1
   10a24:	183fe526 	beq	r3,zero,109bc <__alt_data_end+0xffff09bc>
   10a28:	01803fc4 	movi	r6,255
   10a2c:	81bfdb1e 	bne	r16,r6,1099c <__alt_data_end+0xffff099c>
   10a30:	003f8806 	br	10854 <__alt_data_end+0xffff0854>
   10a34:	1000201e 	bne	r2,zero,10ab8 <__addsf3+0x2c0>
   10a38:	80800044 	addi	r2,r16,1
   10a3c:	10803fcc 	andi	r2,r2,255
   10a40:	01800044 	movi	r6,1
   10a44:	3080450e 	bge	r6,r2,10b5c <__addsf3+0x364>
   10a48:	2165c83a 	sub	r18,r4,r5
   10a4c:	90c1002c 	andhi	r3,r18,1024
   10a50:	18002b26 	beq	r3,zero,10b00 <__addsf3+0x308>
   10a54:	2925c83a 	sub	r18,r5,r4
   10a58:	3823883a 	mov	r17,r7
   10a5c:	003fab06 	br	1090c <__alt_data_end+0xffff090c>
   10a60:	8805883a 	mov	r2,r17
   10a64:	043fffc4 	movi	r16,-1
   10a68:	0009883a 	mov	r4,zero
   10a6c:	003f8706 	br	1088c <__alt_data_end+0xffff088c>
   10a70:	013f0034 	movhi	r4,64512
   10a74:	213fffc4 	addi	r4,r4,-1
   10a78:	80a1c83a 	sub	r16,r16,r2
   10a7c:	9108703a 	and	r4,r18,r4
   10a80:	003f7406 	br	10854 <__alt_data_end+0xffff0854>
   10a84:	1800411e 	bne	r3,zero,10b8c <__addsf3+0x394>
   10a88:	80c00044 	addi	r3,r16,1
   10a8c:	19c03fcc 	andi	r7,r3,255
   10a90:	01800044 	movi	r6,1
   10a94:	31c0260e 	bge	r6,r7,10b30 <__addsf3+0x338>
   10a98:	01803fc4 	movi	r6,255
   10a9c:	19802126 	beq	r3,r6,10b24 <__addsf3+0x32c>
   10aa0:	2149883a 	add	r4,r4,r5
   10aa4:	2008d07a 	srli	r4,r4,1
   10aa8:	1821883a 	mov	r16,r3
   10aac:	003f6906 	br	10854 <__alt_data_end+0xffff0854>
   10ab0:	01400044 	movi	r5,1
   10ab4:	003f8f06 	br	108f4 <__alt_data_end+0xffff08f4>
   10ab8:	8000151e 	bne	r16,zero,10b10 <__addsf3+0x318>
   10abc:	20002f26 	beq	r4,zero,10b7c <__addsf3+0x384>
   10ac0:	0084303a 	nor	r2,zero,r2
   10ac4:	10000a26 	beq	r2,zero,10af0 <__addsf3+0x2f8>
   10ac8:	00c03fc4 	movi	r3,255
   10acc:	30c02b26 	beq	r6,r3,10b7c <__addsf3+0x384>
   10ad0:	00c006c4 	movi	r3,27
   10ad4:	18806d16 	blt	r3,r2,10c8c <__addsf3+0x494>
   10ad8:	00c00804 	movi	r3,32
   10adc:	1887c83a 	sub	r3,r3,r2
   10ae0:	20c6983a 	sll	r3,r4,r3
   10ae4:	2084d83a 	srl	r2,r4,r2
   10ae8:	1808c03a 	cmpne	r4,r3,zero
   10aec:	1108b03a 	or	r4,r2,r4
   10af0:	2909c83a 	sub	r4,r5,r4
   10af4:	3021883a 	mov	r16,r6
   10af8:	3823883a 	mov	r17,r7
   10afc:	003f7e06 	br	108f8 <__alt_data_end+0xffff08f8>
   10b00:	903f821e 	bne	r18,zero,1090c <__alt_data_end+0xffff090c>
   10b04:	0005883a 	mov	r2,zero
   10b08:	0021883a 	mov	r16,zero
   10b0c:	003fba06 	br	109f8 <__alt_data_end+0xffff09f8>
   10b10:	00c03fc4 	movi	r3,255
   10b14:	30c01926 	beq	r6,r3,10b7c <__addsf3+0x384>
   10b18:	0085c83a 	sub	r2,zero,r2
   10b1c:	21010034 	orhi	r4,r4,1024
   10b20:	003feb06 	br	10ad0 <__alt_data_end+0xffff0ad0>
   10b24:	043fffc4 	movi	r16,-1
   10b28:	0009883a 	mov	r4,zero
   10b2c:	003f5706 	br	1088c <__alt_data_end+0xffff088c>
   10b30:	80004a1e 	bne	r16,zero,10c5c <__addsf3+0x464>
   10b34:	20005926 	beq	r4,zero,10c9c <__addsf3+0x4a4>
   10b38:	283f4626 	beq	r5,zero,10854 <__alt_data_end+0xffff0854>
   10b3c:	2149883a 	add	r4,r4,r5
   10b40:	2081002c 	andhi	r2,r4,1024
   10b44:	103f8226 	beq	r2,zero,10950 <__alt_data_end+0xffff0950>
   10b48:	00bf0034 	movhi	r2,64512
   10b4c:	10bfffc4 	addi	r2,r2,-1
   10b50:	3021883a 	mov	r16,r6
   10b54:	2088703a 	and	r4,r4,r2
   10b58:	003f3e06 	br	10854 <__alt_data_end+0xffff0854>
   10b5c:	8000121e 	bne	r16,zero,10ba8 <__addsf3+0x3b0>
   10b60:	2000261e 	bne	r4,zero,10bfc <__addsf3+0x404>
   10b64:	283fa226 	beq	r5,zero,109f0 <__alt_data_end+0xffff09f0>
   10b68:	2809883a 	mov	r4,r5
   10b6c:	3823883a 	mov	r17,r7
   10b70:	003f3806 	br	10854 <__alt_data_end+0xffff0854>
   10b74:	01400044 	movi	r5,1
   10b78:	003f9006 	br	109bc <__alt_data_end+0xffff09bc>
   10b7c:	2809883a 	mov	r4,r5
   10b80:	3021883a 	mov	r16,r6
   10b84:	3823883a 	mov	r17,r7
   10b88:	003f3206 	br	10854 <__alt_data_end+0xffff0854>
   10b8c:	80000c1e 	bne	r16,zero,10bc0 <__addsf3+0x3c8>
   10b90:	20002f26 	beq	r4,zero,10c50 <__addsf3+0x458>
   10b94:	00c6303a 	nor	r3,zero,r3
   10b98:	18002b1e 	bne	r3,zero,10c48 <__addsf3+0x450>
   10b9c:	2149883a 	add	r4,r4,r5
   10ba0:	3021883a 	mov	r16,r6
   10ba4:	003f8606 	br	109c0 <__alt_data_end+0xffff09c0>
   10ba8:	20001b1e 	bne	r4,zero,10c18 <__addsf3+0x420>
   10bac:	28003926 	beq	r5,zero,10c94 <__addsf3+0x49c>
   10bb0:	2809883a 	mov	r4,r5
   10bb4:	3823883a 	mov	r17,r7
   10bb8:	04003fc4 	movi	r16,255
   10bbc:	003f2506 	br	10854 <__alt_data_end+0xffff0854>
   10bc0:	01c03fc4 	movi	r7,255
   10bc4:	31c02226 	beq	r6,r7,10c50 <__addsf3+0x458>
   10bc8:	00c7c83a 	sub	r3,zero,r3
   10bcc:	21010034 	orhi	r4,r4,1024
   10bd0:	01c006c4 	movi	r7,27
   10bd4:	38c03616 	blt	r7,r3,10cb0 <__addsf3+0x4b8>
   10bd8:	01c00804 	movi	r7,32
   10bdc:	38cfc83a 	sub	r7,r7,r3
   10be0:	21ce983a 	sll	r7,r4,r7
   10be4:	20c6d83a 	srl	r3,r4,r3
   10be8:	3808c03a 	cmpne	r4,r7,zero
   10bec:	1906b03a 	or	r3,r3,r4
   10bf0:	1949883a 	add	r4,r3,r5
   10bf4:	3021883a 	mov	r16,r6
   10bf8:	003f7106 	br	109c0 <__alt_data_end+0xffff09c0>
   10bfc:	283f1526 	beq	r5,zero,10854 <__alt_data_end+0xffff0854>
   10c00:	2145c83a 	sub	r2,r4,r5
   10c04:	10c1002c 	andhi	r3,r2,1024
   10c08:	183f4f26 	beq	r3,zero,10948 <__alt_data_end+0xffff0948>
   10c0c:	2909c83a 	sub	r4,r5,r4
   10c10:	3823883a 	mov	r17,r7
   10c14:	003f0f06 	br	10854 <__alt_data_end+0xffff0854>
   10c18:	28001a26 	beq	r5,zero,10c84 <__addsf3+0x48c>
   10c1c:	2008d0fa 	srli	r4,r4,3
   10c20:	2080102c 	andhi	r2,r4,64
   10c24:	10000526 	beq	r2,zero,10c3c <__addsf3+0x444>
   10c28:	280ad0fa 	srli	r5,r5,3
   10c2c:	2880102c 	andhi	r2,r5,64
   10c30:	1000021e 	bne	r2,zero,10c3c <__addsf3+0x444>
   10c34:	2809883a 	mov	r4,r5
   10c38:	3823883a 	mov	r17,r7
   10c3c:	200890fa 	slli	r4,r4,3
   10c40:	04003fc4 	movi	r16,255
   10c44:	003f0306 	br	10854 <__alt_data_end+0xffff0854>
   10c48:	01c03fc4 	movi	r7,255
   10c4c:	31ffe01e 	bne	r6,r7,10bd0 <__alt_data_end+0xffff0bd0>
   10c50:	2809883a 	mov	r4,r5
   10c54:	3021883a 	mov	r16,r6
   10c58:	003efe06 	br	10854 <__alt_data_end+0xffff0854>
   10c5c:	20001126 	beq	r4,zero,10ca4 <__addsf3+0x4ac>
   10c60:	28000826 	beq	r5,zero,10c84 <__addsf3+0x48c>
   10c64:	2008d0fa 	srli	r4,r4,3
   10c68:	2080102c 	andhi	r2,r4,64
   10c6c:	103ff326 	beq	r2,zero,10c3c <__alt_data_end+0xffff0c3c>
   10c70:	280ad0fa 	srli	r5,r5,3
   10c74:	2880102c 	andhi	r2,r5,64
   10c78:	103ff01e 	bne	r2,zero,10c3c <__alt_data_end+0xffff0c3c>
   10c7c:	2809883a 	mov	r4,r5
   10c80:	003fee06 	br	10c3c <__alt_data_end+0xffff0c3c>
   10c84:	04003fc4 	movi	r16,255
   10c88:	003ef206 	br	10854 <__alt_data_end+0xffff0854>
   10c8c:	01000044 	movi	r4,1
   10c90:	003f9706 	br	10af0 <__alt_data_end+0xffff0af0>
   10c94:	0005883a 	mov	r2,zero
   10c98:	003f3406 	br	1096c <__alt_data_end+0xffff096c>
   10c9c:	2809883a 	mov	r4,r5
   10ca0:	003eec06 	br	10854 <__alt_data_end+0xffff0854>
   10ca4:	2809883a 	mov	r4,r5
   10ca8:	04003fc4 	movi	r16,255
   10cac:	003ee906 	br	10854 <__alt_data_end+0xffff0854>
   10cb0:	00c00044 	movi	r3,1
   10cb4:	003fce06 	br	10bf0 <__alt_data_end+0xffff0bf0>
   10cb8:	0005883a 	mov	r2,zero
   10cbc:	003f4e06 	br	109f8 <__alt_data_end+0xffff09f8>

00010cc0 <__mulsf3>:
   10cc0:	defff504 	addi	sp,sp,-44
   10cc4:	dc000115 	stw	r16,4(sp)
   10cc8:	2020d5fa 	srli	r16,r4,23
   10ccc:	dd400615 	stw	r21,24(sp)
   10cd0:	202ad7fa 	srli	r21,r4,31
   10cd4:	dc800315 	stw	r18,12(sp)
   10cd8:	04802034 	movhi	r18,128
   10cdc:	df000915 	stw	fp,36(sp)
   10ce0:	dd000515 	stw	r20,20(sp)
   10ce4:	94bfffc4 	addi	r18,r18,-1
   10ce8:	dfc00a15 	stw	ra,40(sp)
   10cec:	ddc00815 	stw	r23,32(sp)
   10cf0:	dd800715 	stw	r22,28(sp)
   10cf4:	dcc00415 	stw	r19,16(sp)
   10cf8:	dc400215 	stw	r17,8(sp)
   10cfc:	84003fcc 	andi	r16,r16,255
   10d00:	9124703a 	and	r18,r18,r4
   10d04:	a829883a 	mov	r20,r21
   10d08:	af003fcc 	andi	fp,r21,255
   10d0c:	80005426 	beq	r16,zero,10e60 <__mulsf3+0x1a0>
   10d10:	00803fc4 	movi	r2,255
   10d14:	80802f26 	beq	r16,r2,10dd4 <__mulsf3+0x114>
   10d18:	91002034 	orhi	r4,r18,128
   10d1c:	202490fa 	slli	r18,r4,3
   10d20:	843fe044 	addi	r16,r16,-127
   10d24:	0023883a 	mov	r17,zero
   10d28:	002f883a 	mov	r23,zero
   10d2c:	2804d5fa 	srli	r2,r5,23
   10d30:	282cd7fa 	srli	r22,r5,31
   10d34:	01002034 	movhi	r4,128
   10d38:	213fffc4 	addi	r4,r4,-1
   10d3c:	10803fcc 	andi	r2,r2,255
   10d40:	2166703a 	and	r19,r4,r5
   10d44:	b1803fcc 	andi	r6,r22,255
   10d48:	10004c26 	beq	r2,zero,10e7c <__mulsf3+0x1bc>
   10d4c:	00c03fc4 	movi	r3,255
   10d50:	10c04726 	beq	r2,r3,10e70 <__mulsf3+0x1b0>
   10d54:	99002034 	orhi	r4,r19,128
   10d58:	202690fa 	slli	r19,r4,3
   10d5c:	10bfe044 	addi	r2,r2,-127
   10d60:	0007883a 	mov	r3,zero
   10d64:	80a1883a 	add	r16,r16,r2
   10d68:	010003c4 	movi	r4,15
   10d6c:	1c44b03a 	or	r2,r3,r17
   10d70:	b56af03a 	xor	r21,r22,r21
   10d74:	81c00044 	addi	r7,r16,1
   10d78:	20806b36 	bltu	r4,r2,10f28 <__mulsf3+0x268>
   10d7c:	100490ba 	slli	r2,r2,2
   10d80:	01000074 	movhi	r4,1
   10d84:	21036504 	addi	r4,r4,3476
   10d88:	1105883a 	add	r2,r2,r4
   10d8c:	10800017 	ldw	r2,0(r2)
   10d90:	1000683a 	jmp	r2
   10d94:	00010f28 	cmpgeui	zero,zero,1084
   10d98:	00010de8 	cmpgeui	zero,zero,1079
   10d9c:	00010de8 	cmpgeui	zero,zero,1079
   10da0:	00010de4 	muli	zero,zero,1079
   10da4:	00010f0c 	andi	zero,zero,1084
   10da8:	00010f0c 	andi	zero,zero,1084
   10dac:	00010ef8 	rdprs	zero,zero,1083
   10db0:	00010de4 	muli	zero,zero,1079
   10db4:	00010f0c 	andi	zero,zero,1084
   10db8:	00010ef8 	rdprs	zero,zero,1083
   10dbc:	00010f0c 	andi	zero,zero,1084
   10dc0:	00010de4 	muli	zero,zero,1079
   10dc4:	00010f18 	cmpnei	zero,zero,1084
   10dc8:	00010f18 	cmpnei	zero,zero,1084
   10dcc:	00010f18 	cmpnei	zero,zero,1084
   10dd0:	00011028 	cmpgeui	zero,zero,1088
   10dd4:	90003b1e 	bne	r18,zero,10ec4 <__mulsf3+0x204>
   10dd8:	04400204 	movi	r17,8
   10ddc:	05c00084 	movi	r23,2
   10de0:	003fd206 	br	10d2c <__alt_data_end+0xffff0d2c>
   10de4:	302b883a 	mov	r21,r6
   10de8:	00800084 	movi	r2,2
   10dec:	18802626 	beq	r3,r2,10e88 <__mulsf3+0x1c8>
   10df0:	008000c4 	movi	r2,3
   10df4:	1880b826 	beq	r3,r2,110d8 <__mulsf3+0x418>
   10df8:	00800044 	movi	r2,1
   10dfc:	1880af1e 	bne	r3,r2,110bc <__mulsf3+0x3fc>
   10e00:	a829883a 	mov	r20,r21
   10e04:	0007883a 	mov	r3,zero
   10e08:	0009883a 	mov	r4,zero
   10e0c:	18803fcc 	andi	r2,r3,255
   10e10:	100695fa 	slli	r3,r2,23
   10e14:	a0803fcc 	andi	r2,r20,255
   10e18:	100a97fa 	slli	r5,r2,31
   10e1c:	00802034 	movhi	r2,128
   10e20:	10bfffc4 	addi	r2,r2,-1
   10e24:	2084703a 	and	r2,r4,r2
   10e28:	10c4b03a 	or	r2,r2,r3
   10e2c:	1144b03a 	or	r2,r2,r5
   10e30:	dfc00a17 	ldw	ra,40(sp)
   10e34:	df000917 	ldw	fp,36(sp)
   10e38:	ddc00817 	ldw	r23,32(sp)
   10e3c:	dd800717 	ldw	r22,28(sp)
   10e40:	dd400617 	ldw	r21,24(sp)
   10e44:	dd000517 	ldw	r20,20(sp)
   10e48:	dcc00417 	ldw	r19,16(sp)
   10e4c:	dc800317 	ldw	r18,12(sp)
   10e50:	dc400217 	ldw	r17,8(sp)
   10e54:	dc000117 	ldw	r16,4(sp)
   10e58:	dec00b04 	addi	sp,sp,44
   10e5c:	f800283a 	ret
   10e60:	90000d1e 	bne	r18,zero,10e98 <__mulsf3+0x1d8>
   10e64:	04400104 	movi	r17,4
   10e68:	05c00044 	movi	r23,1
   10e6c:	003faf06 	br	10d2c <__alt_data_end+0xffff0d2c>
   10e70:	9806c03a 	cmpne	r3,r19,zero
   10e74:	18c00084 	addi	r3,r3,2
   10e78:	003fba06 	br	10d64 <__alt_data_end+0xffff0d64>
   10e7c:	9800141e 	bne	r19,zero,10ed0 <__mulsf3+0x210>
   10e80:	00c00044 	movi	r3,1
   10e84:	003fb706 	br	10d64 <__alt_data_end+0xffff0d64>
   10e88:	a829883a 	mov	r20,r21
   10e8c:	00ffffc4 	movi	r3,-1
   10e90:	0009883a 	mov	r4,zero
   10e94:	003fdd06 	br	10e0c <__alt_data_end+0xffff0e0c>
   10e98:	9009883a 	mov	r4,r18
   10e9c:	d9400015 	stw	r5,0(sp)
   10ea0:	00112140 	call	11214 <__clzsi2>
   10ea4:	10fffec4 	addi	r3,r2,-5
   10ea8:	10801d84 	addi	r2,r2,118
   10eac:	90e4983a 	sll	r18,r18,r3
   10eb0:	00a1c83a 	sub	r16,zero,r2
   10eb4:	0023883a 	mov	r17,zero
   10eb8:	002f883a 	mov	r23,zero
   10ebc:	d9400017 	ldw	r5,0(sp)
   10ec0:	003f9a06 	br	10d2c <__alt_data_end+0xffff0d2c>
   10ec4:	04400304 	movi	r17,12
   10ec8:	05c000c4 	movi	r23,3
   10ecc:	003f9706 	br	10d2c <__alt_data_end+0xffff0d2c>
   10ed0:	9809883a 	mov	r4,r19
   10ed4:	d9800015 	stw	r6,0(sp)
   10ed8:	00112140 	call	11214 <__clzsi2>
   10edc:	10fffec4 	addi	r3,r2,-5
   10ee0:	10801d84 	addi	r2,r2,118
   10ee4:	98e6983a 	sll	r19,r19,r3
   10ee8:	0085c83a 	sub	r2,zero,r2
   10eec:	0007883a 	mov	r3,zero
   10ef0:	d9800017 	ldw	r6,0(sp)
   10ef4:	003f9b06 	br	10d64 <__alt_data_end+0xffff0d64>
   10ef8:	01002034 	movhi	r4,128
   10efc:	0029883a 	mov	r20,zero
   10f00:	213fffc4 	addi	r4,r4,-1
   10f04:	00ffffc4 	movi	r3,-1
   10f08:	003fc006 	br	10e0c <__alt_data_end+0xffff0e0c>
   10f0c:	9027883a 	mov	r19,r18
   10f10:	b807883a 	mov	r3,r23
   10f14:	003fb406 	br	10de8 <__alt_data_end+0xffff0de8>
   10f18:	9027883a 	mov	r19,r18
   10f1c:	e02b883a 	mov	r21,fp
   10f20:	b807883a 	mov	r3,r23
   10f24:	003fb006 	br	10de8 <__alt_data_end+0xffff0de8>
   10f28:	9028d43a 	srli	r20,r18,16
   10f2c:	982cd43a 	srli	r22,r19,16
   10f30:	94bfffcc 	andi	r18,r18,65535
   10f34:	9cffffcc 	andi	r19,r19,65535
   10f38:	980b883a 	mov	r5,r19
   10f3c:	9009883a 	mov	r4,r18
   10f40:	d9c00015 	stw	r7,0(sp)
   10f44:	00112780 	call	11278 <__mulsi3>
   10f48:	a00b883a 	mov	r5,r20
   10f4c:	9809883a 	mov	r4,r19
   10f50:	1023883a 	mov	r17,r2
   10f54:	00112780 	call	11278 <__mulsi3>
   10f58:	a009883a 	mov	r4,r20
   10f5c:	b00b883a 	mov	r5,r22
   10f60:	1027883a 	mov	r19,r2
   10f64:	00112780 	call	11278 <__mulsi3>
   10f68:	b00b883a 	mov	r5,r22
   10f6c:	9009883a 	mov	r4,r18
   10f70:	1029883a 	mov	r20,r2
   10f74:	00112780 	call	11278 <__mulsi3>
   10f78:	8806d43a 	srli	r3,r17,16
   10f7c:	14c5883a 	add	r2,r2,r19
   10f80:	d9c00017 	ldw	r7,0(sp)
   10f84:	1885883a 	add	r2,r3,r2
   10f88:	14c0022e 	bgeu	r2,r19,10f94 <__mulsf3+0x2d4>
   10f8c:	00c00074 	movhi	r3,1
   10f90:	a0e9883a 	add	r20,r20,r3
   10f94:	1026943a 	slli	r19,r2,16
   10f98:	8c7fffcc 	andi	r17,r17,65535
   10f9c:	1004d43a 	srli	r2,r2,16
   10fa0:	9c63883a 	add	r17,r19,r17
   10fa4:	882691ba 	slli	r19,r17,6
   10fa8:	1505883a 	add	r2,r2,r20
   10fac:	8822d6ba 	srli	r17,r17,26
   10fb0:	100891ba 	slli	r4,r2,6
   10fb4:	9826c03a 	cmpne	r19,r19,zero
   10fb8:	9c62b03a 	or	r17,r19,r17
   10fbc:	8926b03a 	or	r19,r17,r4
   10fc0:	9882002c 	andhi	r2,r19,2048
   10fc4:	10000426 	beq	r2,zero,10fd8 <__mulsf3+0x318>
   10fc8:	9804d07a 	srli	r2,r19,1
   10fcc:	9900004c 	andi	r4,r19,1
   10fd0:	3821883a 	mov	r16,r7
   10fd4:	1126b03a 	or	r19,r2,r4
   10fd8:	80c01fc4 	addi	r3,r16,127
   10fdc:	00c0210e 	bge	zero,r3,11064 <__mulsf3+0x3a4>
   10fe0:	988001cc 	andi	r2,r19,7
   10fe4:	10000426 	beq	r2,zero,10ff8 <__mulsf3+0x338>
   10fe8:	988003cc 	andi	r2,r19,15
   10fec:	01000104 	movi	r4,4
   10ff0:	11000126 	beq	r2,r4,10ff8 <__mulsf3+0x338>
   10ff4:	9927883a 	add	r19,r19,r4
   10ff8:	9882002c 	andhi	r2,r19,2048
   10ffc:	10000426 	beq	r2,zero,11010 <__mulsf3+0x350>
   11000:	00be0034 	movhi	r2,63488
   11004:	10bfffc4 	addi	r2,r2,-1
   11008:	80c02004 	addi	r3,r16,128
   1100c:	98a6703a 	and	r19,r19,r2
   11010:	00803f84 	movi	r2,254
   11014:	10ff9c16 	blt	r2,r3,10e88 <__alt_data_end+0xffff0e88>
   11018:	980891ba 	slli	r4,r19,6
   1101c:	a829883a 	mov	r20,r21
   11020:	2008d27a 	srli	r4,r4,9
   11024:	003f7906 	br	10e0c <__alt_data_end+0xffff0e0c>
   11028:	9080102c 	andhi	r2,r18,64
   1102c:	10000826 	beq	r2,zero,11050 <__mulsf3+0x390>
   11030:	9880102c 	andhi	r2,r19,64
   11034:	1000061e 	bne	r2,zero,11050 <__mulsf3+0x390>
   11038:	00802034 	movhi	r2,128
   1103c:	99001034 	orhi	r4,r19,64
   11040:	10bfffc4 	addi	r2,r2,-1
   11044:	b029883a 	mov	r20,r22
   11048:	2088703a 	and	r4,r4,r2
   1104c:	003fad06 	br	10f04 <__alt_data_end+0xffff0f04>
   11050:	00802034 	movhi	r2,128
   11054:	91001034 	orhi	r4,r18,64
   11058:	10bfffc4 	addi	r2,r2,-1
   1105c:	2088703a 	and	r4,r4,r2
   11060:	003fa806 	br	10f04 <__alt_data_end+0xffff0f04>
   11064:	00800044 	movi	r2,1
   11068:	10c7c83a 	sub	r3,r2,r3
   1106c:	008006c4 	movi	r2,27
   11070:	10ff6316 	blt	r2,r3,10e00 <__alt_data_end+0xffff0e00>
   11074:	00800804 	movi	r2,32
   11078:	10c5c83a 	sub	r2,r2,r3
   1107c:	9884983a 	sll	r2,r19,r2
   11080:	98c6d83a 	srl	r3,r19,r3
   11084:	1004c03a 	cmpne	r2,r2,zero
   11088:	1884b03a 	or	r2,r3,r2
   1108c:	10c001cc 	andi	r3,r2,7
   11090:	18000426 	beq	r3,zero,110a4 <__mulsf3+0x3e4>
   11094:	10c003cc 	andi	r3,r2,15
   11098:	01000104 	movi	r4,4
   1109c:	19000126 	beq	r3,r4,110a4 <__mulsf3+0x3e4>
   110a0:	1105883a 	add	r2,r2,r4
   110a4:	10c1002c 	andhi	r3,r2,1024
   110a8:	18000626 	beq	r3,zero,110c4 <__mulsf3+0x404>
   110ac:	a829883a 	mov	r20,r21
   110b0:	00c00044 	movi	r3,1
   110b4:	0009883a 	mov	r4,zero
   110b8:	003f5406 	br	10e0c <__alt_data_end+0xffff0e0c>
   110bc:	3821883a 	mov	r16,r7
   110c0:	003fc506 	br	10fd8 <__alt_data_end+0xffff0fd8>
   110c4:	100491ba 	slli	r2,r2,6
   110c8:	a829883a 	mov	r20,r21
   110cc:	0007883a 	mov	r3,zero
   110d0:	1008d27a 	srli	r4,r2,9
   110d4:	003f4d06 	br	10e0c <__alt_data_end+0xffff0e0c>
   110d8:	00802034 	movhi	r2,128
   110dc:	99001034 	orhi	r4,r19,64
   110e0:	10bfffc4 	addi	r2,r2,-1
   110e4:	a829883a 	mov	r20,r21
   110e8:	2088703a 	and	r4,r4,r2
   110ec:	003f8506 	br	10f04 <__alt_data_end+0xffff0f04>

000110f0 <__floatsisf>:
   110f0:	defffd04 	addi	sp,sp,-12
   110f4:	dfc00215 	stw	ra,8(sp)
   110f8:	dc400115 	stw	r17,4(sp)
   110fc:	dc000015 	stw	r16,0(sp)
   11100:	20003526 	beq	r4,zero,111d8 <__floatsisf+0xe8>
   11104:	2021883a 	mov	r16,r4
   11108:	2022d7fa 	srli	r17,r4,31
   1110c:	20003616 	blt	r4,zero,111e8 <__floatsisf+0xf8>
   11110:	8009883a 	mov	r4,r16
   11114:	00112140 	call	11214 <__clzsi2>
   11118:	00c02784 	movi	r3,158
   1111c:	1887c83a 	sub	r3,r3,r2
   11120:	01002584 	movi	r4,150
   11124:	20c01416 	blt	r4,r3,11178 <__floatsisf+0x88>
   11128:	20c9c83a 	sub	r4,r4,r3
   1112c:	8120983a 	sll	r16,r16,r4
   11130:	00802034 	movhi	r2,128
   11134:	10bfffc4 	addi	r2,r2,-1
   11138:	8809883a 	mov	r4,r17
   1113c:	80a0703a 	and	r16,r16,r2
   11140:	18803fcc 	andi	r2,r3,255
   11144:	100695fa 	slli	r3,r2,23
   11148:	20803fcc 	andi	r2,r4,255
   1114c:	100897fa 	slli	r4,r2,31
   11150:	00802034 	movhi	r2,128
   11154:	10bfffc4 	addi	r2,r2,-1
   11158:	8084703a 	and	r2,r16,r2
   1115c:	10c4b03a 	or	r2,r2,r3
   11160:	1104b03a 	or	r2,r2,r4
   11164:	dfc00217 	ldw	ra,8(sp)
   11168:	dc400117 	ldw	r17,4(sp)
   1116c:	dc000017 	ldw	r16,0(sp)
   11170:	dec00304 	addi	sp,sp,12
   11174:	f800283a 	ret
   11178:	01002644 	movi	r4,153
   1117c:	20c01c16 	blt	r4,r3,111f0 <__floatsisf+0x100>
   11180:	20c9c83a 	sub	r4,r4,r3
   11184:	8120983a 	sll	r16,r16,r4
   11188:	013f0034 	movhi	r4,64512
   1118c:	213fffc4 	addi	r4,r4,-1
   11190:	814001cc 	andi	r5,r16,7
   11194:	8108703a 	and	r4,r16,r4
   11198:	28000426 	beq	r5,zero,111ac <__floatsisf+0xbc>
   1119c:	840003cc 	andi	r16,r16,15
   111a0:	01400104 	movi	r5,4
   111a4:	81400126 	beq	r16,r5,111ac <__floatsisf+0xbc>
   111a8:	2149883a 	add	r4,r4,r5
   111ac:	2141002c 	andhi	r5,r4,1024
   111b0:	28000526 	beq	r5,zero,111c8 <__floatsisf+0xd8>
   111b4:	00c027c4 	movi	r3,159
   111b8:	1887c83a 	sub	r3,r3,r2
   111bc:	00bf0034 	movhi	r2,64512
   111c0:	10bfffc4 	addi	r2,r2,-1
   111c4:	2088703a 	and	r4,r4,r2
   111c8:	202091ba 	slli	r16,r4,6
   111cc:	8809883a 	mov	r4,r17
   111d0:	8020d27a 	srli	r16,r16,9
   111d4:	003fda06 	br	11140 <__alt_data_end+0xffff1140>
   111d8:	0009883a 	mov	r4,zero
   111dc:	0007883a 	mov	r3,zero
   111e0:	0021883a 	mov	r16,zero
   111e4:	003fd606 	br	11140 <__alt_data_end+0xffff1140>
   111e8:	0121c83a 	sub	r16,zero,r4
   111ec:	003fc806 	br	11110 <__alt_data_end+0xffff1110>
   111f0:	01002e44 	movi	r4,185
   111f4:	20c9c83a 	sub	r4,r4,r3
   111f8:	01400144 	movi	r5,5
   111fc:	8108983a 	sll	r4,r16,r4
   11200:	288bc83a 	sub	r5,r5,r2
   11204:	8160d83a 	srl	r16,r16,r5
   11208:	2008c03a 	cmpne	r4,r4,zero
   1120c:	8120b03a 	or	r16,r16,r4
   11210:	003fdd06 	br	11188 <__alt_data_end+0xffff1188>

00011214 <__clzsi2>:
   11214:	00bfffd4 	movui	r2,65535
   11218:	11000536 	bltu	r2,r4,11230 <__clzsi2+0x1c>
   1121c:	00803fc4 	movi	r2,255
   11220:	11000f36 	bltu	r2,r4,11260 <__clzsi2+0x4c>
   11224:	00800804 	movi	r2,32
   11228:	0007883a 	mov	r3,zero
   1122c:	00000506 	br	11244 <__clzsi2+0x30>
   11230:	00804034 	movhi	r2,256
   11234:	10bfffc4 	addi	r2,r2,-1
   11238:	11000c2e 	bgeu	r2,r4,1126c <__clzsi2+0x58>
   1123c:	00800204 	movi	r2,8
   11240:	00c00604 	movi	r3,24
   11244:	20c8d83a 	srl	r4,r4,r3
   11248:	00c00074 	movhi	r3,1
   1124c:	18c6b144 	addi	r3,r3,6853
   11250:	1909883a 	add	r4,r3,r4
   11254:	20c00003 	ldbu	r3,0(r4)
   11258:	10c5c83a 	sub	r2,r2,r3
   1125c:	f800283a 	ret
   11260:	00800604 	movi	r2,24
   11264:	00c00204 	movi	r3,8
   11268:	003ff606 	br	11244 <__alt_data_end+0xffff1244>
   1126c:	00800404 	movi	r2,16
   11270:	1007883a 	mov	r3,r2
   11274:	003ff306 	br	11244 <__alt_data_end+0xffff1244>

00011278 <__mulsi3>:
   11278:	0005883a 	mov	r2,zero
   1127c:	20000726 	beq	r4,zero,1129c <__mulsi3+0x24>
   11280:	20c0004c 	andi	r3,r4,1
   11284:	2008d07a 	srli	r4,r4,1
   11288:	18000126 	beq	r3,zero,11290 <__mulsi3+0x18>
   1128c:	1145883a 	add	r2,r2,r5
   11290:	294b883a 	add	r5,r5,r5
   11294:	203ffa1e 	bne	r4,zero,11280 <__alt_data_end+0xffff1280>
   11298:	f800283a 	ret
   1129c:	f800283a 	ret

000112a0 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   112a0:	00800074 	movhi	r2,1
   112a4:	10870504 	addi	r2,r2,7188
   112a8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   112ac:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   112b0:	01000074 	movhi	r4,1
   112b4:	01800044 	movi	r6,1
   112b8:	d80b883a 	mov	r5,sp
   112bc:	21071c04 	addi	r4,r4,7280
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   112c0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   112c4:	001166c0 	call	1166c <altera_avalon_jtag_uart_read>
   112c8:	0080020e 	bge	zero,r2,112d4 <alt_getchar+0x34>
        return -1;
    }
    return c;
   112cc:	d8800007 	ldb	r2,0(sp)
   112d0:	00000106 	br	112d8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   112d4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   112d8:	dfc00117 	ldw	ra,4(sp)
   112dc:	dec00204 	addi	sp,sp,8
   112e0:	f800283a 	ret

000112e4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   112e4:	008007c4 	movi	r2,31
   112e8:	11002136 	bltu	r2,r4,11370 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112ec:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112f0:	00ffff84 	movi	r3,-2
   112f4:	38c4703a 	and	r2,r7,r3
   112f8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   112fc:	200490fa 	slli	r2,r4,3
   11300:	02000074 	movhi	r8,1
   11304:	42082504 	addi	r8,r8,8340
   11308:	4085883a 	add	r2,r8,r2
   1130c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11310:	11400115 	stw	r5,4(r2)
   11314:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11318:	30000726 	beq	r6,zero,11338 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1131c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11320:	28c6703a 	and	r3,r5,r3
   11324:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11328:	d0e03f17 	ldw	r3,-32516(gp)
   1132c:	1104983a 	sll	r2,r2,r4
   11330:	10c4b03a 	or	r2,r2,r3
   11334:	00000706 	br	11354 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11338:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1133c:	28c6703a 	and	r3,r5,r3
   11340:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11344:	1104983a 	sll	r2,r2,r4
   11348:	d0e03f17 	ldw	r3,-32516(gp)
   1134c:	0084303a 	nor	r2,zero,r2
   11350:	10c4703a 	and	r2,r2,r3
   11354:	d0a03f15 	stw	r2,-32516(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11358:	d0a03f17 	ldw	r2,-32516(gp)
   1135c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11360:	2801703a 	wrctl	status,r5
   11364:	3801703a 	wrctl	status,r7
   11368:	0005883a 	mov	r2,zero
   1136c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   11370:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   11374:	f800283a 	ret

00011378 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11378:	deffff04 	addi	sp,sp,-4
   1137c:	01000074 	movhi	r4,1
   11380:	01400074 	movhi	r5,1
   11384:	dfc00015 	stw	ra,0(sp)
   11388:	2106f504 	addi	r4,r4,7124
   1138c:	29472304 	addi	r5,r5,7308

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11390:	2140061e 	bne	r4,r5,113ac <alt_load+0x34>
   11394:	01000074 	movhi	r4,1
   11398:	01400074 	movhi	r5,1
   1139c:	21000804 	addi	r4,r4,32
   113a0:	29400804 	addi	r5,r5,32
   113a4:	2140121e 	bne	r4,r5,113f0 <alt_load+0x78>
   113a8:	00000b06 	br	113d8 <alt_load+0x60>
   113ac:	00c00074 	movhi	r3,1
   113b0:	18c72304 	addi	r3,r3,7308
   113b4:	1907c83a 	sub	r3,r3,r4
   113b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   113bc:	10fff526 	beq	r2,r3,11394 <__alt_data_end+0xffff1394>
    {
      *to++ = *from++;
   113c0:	114f883a 	add	r7,r2,r5
   113c4:	39c00017 	ldw	r7,0(r7)
   113c8:	110d883a 	add	r6,r2,r4
   113cc:	10800104 	addi	r2,r2,4
   113d0:	31c00015 	stw	r7,0(r6)
   113d4:	003ff906 	br	113bc <__alt_data_end+0xffff13bc>
   113d8:	01000074 	movhi	r4,1
   113dc:	01400074 	movhi	r5,1
   113e0:	21068504 	addi	r4,r4,6676
   113e4:	29468504 	addi	r5,r5,6676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   113e8:	2140101e 	bne	r4,r5,1142c <alt_load+0xb4>
   113ec:	00000b06 	br	1141c <alt_load+0xa4>
   113f0:	00c00074 	movhi	r3,1
   113f4:	18c06004 	addi	r3,r3,384
   113f8:	1907c83a 	sub	r3,r3,r4
   113fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11400:	10fff526 	beq	r2,r3,113d8 <__alt_data_end+0xffff13d8>
    {
      *to++ = *from++;
   11404:	114f883a 	add	r7,r2,r5
   11408:	39c00017 	ldw	r7,0(r7)
   1140c:	110d883a 	add	r6,r2,r4
   11410:	10800104 	addi	r2,r2,4
   11414:	31c00015 	stw	r7,0(r6)
   11418:	003ff906 	br	11400 <__alt_data_end+0xffff1400>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1141c:	001185c0 	call	1185c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11420:	dfc00017 	ldw	ra,0(sp)
   11424:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11428:	00119481 	jmpi	11948 <alt_icache_flush_all>
   1142c:	00c00074 	movhi	r3,1
   11430:	18c6f504 	addi	r3,r3,7124
   11434:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11438:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1143c:	18bff726 	beq	r3,r2,1141c <__alt_data_end+0xffff141c>
    {
      *to++ = *from++;
   11440:	114f883a 	add	r7,r2,r5
   11444:	39c00017 	ldw	r7,0(r7)
   11448:	110d883a 	add	r6,r2,r4
   1144c:	10800104 	addi	r2,r2,4
   11450:	31c00015 	stw	r7,0(r6)
   11454:	003ff906 	br	1143c <__alt_data_end+0xffff143c>

00011458 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11458:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1145c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11460:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11464:	001163c0 	call	1163c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11468:	001165c0 	call	1165c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1146c:	d1a04017 	ldw	r6,-32512(gp)
   11470:	d1604117 	ldw	r5,-32508(gp)
   11474:	d1204217 	ldw	r4,-32504(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11478:	dfc00017 	ldw	ra,0(sp)
   1147c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11480:	001075c1 	jmpi	1075c <main>

00011484 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   11484:	defff204 	addi	sp,sp,-56
   11488:	2005883a 	mov	r2,r4
   1148c:	dfc00a15 	stw	ra,40(sp)
   11490:	df000915 	stw	fp,36(sp)
   11494:	ddc00815 	stw	r23,32(sp)
   11498:	dd800715 	stw	r22,28(sp)
   1149c:	dd400615 	stw	r21,24(sp)
   114a0:	dd000515 	stw	r20,20(sp)
   114a4:	dcc00415 	stw	r19,16(sp)
   114a8:	dc800315 	stw	r18,12(sp)
   114ac:	dc400215 	stw	r17,8(sp)
   114b0:	dc000115 	stw	r16,4(sp)
   114b4:	d9400b15 	stw	r5,44(sp)
   114b8:	d9800c15 	stw	r6,48(sp)
   114bc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   114c0:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   114c4:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   114c8:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   114cc:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   114d0:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   114d4:	11000007 	ldb	r4,0(r2)
   114d8:	20003a26 	beq	r4,zero,115c4 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   114dc:	24000226 	beq	r4,r16,114e8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   114e0:	14400044 	addi	r17,r2,1
   114e4:	00001406 	br	11538 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   114e8:	14400084 	addi	r17,r2,2
   114ec:	10800047 	ldb	r2,1(r2)
   114f0:	10003426 	beq	r2,zero,115c4 <alt_printf+0x140>
            {
                if (c == '%')
   114f4:	1400021e 	bne	r2,r16,11500 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   114f8:	8009883a 	mov	r4,r16
   114fc:	00000e06 	br	11538 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   11500:	1480051e 	bne	r2,r18,11518 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   11504:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   11508:	ad800104 	addi	r22,r21,4
   1150c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   11510:	00115f40 	call	115f4 <alt_putchar>
   11514:	00002906 	br	115bc <alt_printf+0x138>
                }
                else if (c == 'x')
   11518:	14c0201e 	bne	r2,r19,1159c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1151c:	adc00017 	ldw	r23,0(r21)
   11520:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   11524:	b8000326 	beq	r23,zero,11534 <alt_printf+0xb0>
   11528:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1152c:	00c003c4 	movi	r3,15
   11530:	00000306 	br	11540 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   11534:	01000c04 	movi	r4,48
   11538:	00115f40 	call	115f4 <alt_putchar>
                        continue;
   1153c:	00001f06 	br	115bc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   11540:	1d84983a 	sll	r2,r3,r22
   11544:	15c4703a 	and	r2,r2,r23
   11548:	1000021e 	bne	r2,zero,11554 <alt_printf+0xd0>
                        digit_shift -= 4;
   1154c:	b5bfff04 	addi	r22,r22,-4
   11550:	003ffb06 	br	11540 <__alt_data_end+0xffff1540>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11554:	070003c4 	movi	fp,15
                        if (digit <= 9)
   11558:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1155c:	b0001716 	blt	r22,zero,115bc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11560:	e588983a 	sll	r4,fp,r22
   11564:	25c8703a 	and	r4,r4,r23
   11568:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   1156c:	19000236 	bltu	r3,r4,11578 <alt_printf+0xf4>
                            c = '0' + digit;
   11570:	21000c04 	addi	r4,r4,48
   11574:	00000106 	br	1157c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   11578:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   1157c:	21003fcc 	andi	r4,r4,255
   11580:	2100201c 	xori	r4,r4,128
   11584:	213fe004 	addi	r4,r4,-128
   11588:	d8c00015 	stw	r3,0(sp)
   1158c:	00115f40 	call	115f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11590:	b5bfff04 	addi	r22,r22,-4
   11594:	d8c00017 	ldw	r3,0(sp)
   11598:	003ff006 	br	1155c <__alt_data_end+0xffff155c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   1159c:	1500071e 	bne	r2,r20,115bc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   115a0:	ad800017 	ldw	r22,0(r21)
   115a4:	ad400104 	addi	r21,r21,4

                    while(*s)
   115a8:	b1000007 	ldb	r4,0(r22)
   115ac:	20000326 	beq	r4,zero,115bc <alt_printf+0x138>
                      alt_putchar(*s++);
   115b0:	b5800044 	addi	r22,r22,1
   115b4:	00115f40 	call	115f4 <alt_putchar>
   115b8:	003ffb06 	br	115a8 <__alt_data_end+0xffff15a8>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   115bc:	8805883a 	mov	r2,r17
   115c0:	003fc406 	br	114d4 <__alt_data_end+0xffff14d4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   115c4:	dfc00a17 	ldw	ra,40(sp)
   115c8:	df000917 	ldw	fp,36(sp)
   115cc:	ddc00817 	ldw	r23,32(sp)
   115d0:	dd800717 	ldw	r22,28(sp)
   115d4:	dd400617 	ldw	r21,24(sp)
   115d8:	dd000517 	ldw	r20,20(sp)
   115dc:	dcc00417 	ldw	r19,16(sp)
   115e0:	dc800317 	ldw	r18,12(sp)
   115e4:	dc400217 	ldw	r17,8(sp)
   115e8:	dc000117 	ldw	r16,4(sp)
   115ec:	dec00e04 	addi	sp,sp,56
   115f0:	f800283a 	ret

000115f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   115f4:	defffd04 	addi	sp,sp,-12
   115f8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   115fc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11600:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11604:	01000074 	movhi	r4,1
   11608:	000f883a 	mov	r7,zero
   1160c:	01800044 	movi	r6,1
   11610:	d80b883a 	mov	r5,sp
   11614:	21071c04 	addi	r4,r4,7280
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11618:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1161c:	00116c80 	call	116c8 <altera_avalon_jtag_uart_write>
   11620:	00ffffc4 	movi	r3,-1
   11624:	10c00126 	beq	r2,r3,1162c <alt_putchar+0x38>
        return -1;
    }
    return c;
   11628:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   1162c:	dfc00217 	ldw	ra,8(sp)
   11630:	dc000117 	ldw	r16,4(sp)
   11634:	dec00304 	addi	sp,sp,12
   11638:	f800283a 	ret

0001163c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1163c:	deffff04 	addi	sp,sp,-4
   11640:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11644:	001194c0 	call	1194c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11648:	00800044 	movi	r2,1
   1164c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11650:	dfc00017 	ldw	ra,0(sp)
   11654:	dec00104 	addi	sp,sp,4
   11658:	f800283a 	ret

0001165c <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1165c:	01000074 	movhi	r4,1
   11660:	d1600304 	addi	r5,gp,-32756
   11664:	2106fa04 	addi	r4,r4,7144
   11668:	00118681 	jmpi	11868 <alt_dev_llist_insert>

0001166c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   1166c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   11670:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   11674:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   11678:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   1167c:	11800b2e 	bgeu	r2,r6,116ac <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11680:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11684:	1a60000c 	andi	r9,r3,32768
   11688:	48000326 	beq	r9,zero,11698 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1168c:	10c00005 	stb	r3,0(r2)
   11690:	10800044 	addi	r2,r2,1
   11694:	003ff906 	br	1167c <__alt_data_end+0xffff167c>
    else if (ptr != buffer)
   11698:	11400226 	beq	r2,r5,116a4 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   1169c:	1145c83a 	sub	r2,r2,r5
   116a0:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   116a4:	403ff526 	beq	r8,zero,1167c <__alt_data_end+0xffff167c>
   116a8:	00000106 	br	116b0 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   116ac:	117ffb1e 	bne	r2,r5,1169c <__alt_data_end+0xffff169c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   116b0:	39d0000c 	andi	r7,r7,16384
   116b4:	3800021e 	bne	r7,zero,116c0 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   116b8:	00bffec4 	movi	r2,-5
   116bc:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   116c0:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   116c4:	f800283a 	ret

000116c8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   116c8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   116cc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   116d0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   116d4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   116d8:	2980072e 	bgeu	r5,r6,116f8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   116dc:	38c00037 	ldwio	r3,0(r7)
   116e0:	18ffffec 	andhi	r3,r3,65535
   116e4:	183ffc26 	beq	r3,zero,116d8 <__alt_data_end+0xffff16d8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   116e8:	28c00007 	ldb	r3,0(r5)
   116ec:	20c00035 	stwio	r3,0(r4)
   116f0:	29400044 	addi	r5,r5,1
   116f4:	003ff806 	br	116d8 <__alt_data_end+0xffff16d8>

  return count;
}
   116f8:	f800283a 	ret

000116fc <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   116fc:	d1600304 	addi	r5,gp,-32756
   11700:	00118d41 	jmpi	118d4 <alt_find_dev>

00011704 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11704:	20800a17 	ldw	r2,40(r4)
   11708:	10800023 	ldbuio	r2,0(r2)
   1170c:	28800005 	stb	r2,0(r5)

	return 0;
}
   11710:	0005883a 	mov	r2,zero
   11714:	f800283a 	ret

00011718 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11718:	20800a17 	ldw	r2,40(r4)
   1171c:	29400fcc 	andi	r5,r5,63
   11720:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11724:	20800a17 	ldw	r2,40(r4)
   11728:	10800063 	ldbuio	r2,1(r2)
   1172c:	30800005 	stb	r2,0(r6)

	return 0;
}
   11730:	0005883a 	mov	r2,zero
   11734:	f800283a 	ret

00011738 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11738:	20800a17 	ldw	r2,40(r4)
   1173c:	29400fcc 	andi	r5,r5,63
   11740:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11744:	20800a17 	ldw	r2,40(r4)
   11748:	11800065 	stbio	r6,1(r2)

	return 0;
}
   1174c:	0005883a 	mov	r2,zero
   11750:	f800283a 	ret

00011754 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11754:	20800a17 	ldw	r2,40(r4)
   11758:	00c00c84 	movi	r3,50
   1175c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11760:	20800a17 	ldw	r2,40(r4)
   11764:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11768:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1176c:	10803fcc 	andi	r2,r2,255
   11770:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11774:	20800a17 	ldw	r2,40(r4)
   11778:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1177c:	20800a17 	ldw	r2,40(r4)
   11780:	10800063 	ldbuio	r2,1(r2)
   11784:	10803fcc 	andi	r2,r2,255
   11788:	1006923a 	slli	r3,r2,8
   1178c:	28800017 	ldw	r2,0(r5)
   11790:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11794:	10e0000c 	andi	r3,r2,32768
   11798:	18000126 	beq	r3,zero,117a0 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   1179c:	10bffff4 	orhi	r2,r2,65535
   117a0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   117a4:	0005883a 	mov	r2,zero
   117a8:	f800283a 	ret

000117ac <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   117ac:	20800a17 	ldw	r2,40(r4)
   117b0:	00c00d04 	movi	r3,52
   117b4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   117b8:	20800a17 	ldw	r2,40(r4)
   117bc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   117c0:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   117c4:	10803fcc 	andi	r2,r2,255
   117c8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   117cc:	20800a17 	ldw	r2,40(r4)
   117d0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   117d4:	20800a17 	ldw	r2,40(r4)
   117d8:	10800063 	ldbuio	r2,1(r2)
   117dc:	10803fcc 	andi	r2,r2,255
   117e0:	1006923a 	slli	r3,r2,8
   117e4:	28800017 	ldw	r2,0(r5)
   117e8:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   117ec:	10e0000c 	andi	r3,r2,32768
   117f0:	18000126 	beq	r3,zero,117f8 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   117f4:	10bffff4 	orhi	r2,r2,65535
   117f8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   117fc:	0005883a 	mov	r2,zero
   11800:	f800283a 	ret

00011804 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11804:	20800a17 	ldw	r2,40(r4)
   11808:	00c00d84 	movi	r3,54
   1180c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11810:	20800a17 	ldw	r2,40(r4)
   11814:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11818:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1181c:	10803fcc 	andi	r2,r2,255
   11820:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11824:	20800a17 	ldw	r2,40(r4)
   11828:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1182c:	20800a17 	ldw	r2,40(r4)
   11830:	10800063 	ldbuio	r2,1(r2)
   11834:	10803fcc 	andi	r2,r2,255
   11838:	1006923a 	slli	r3,r2,8
   1183c:	28800017 	ldw	r2,0(r5)
   11840:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11844:	10e0000c 	andi	r3,r2,32768
   11848:	18000126 	beq	r3,zero,11850 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   1184c:	10bffff4 	orhi	r2,r2,65535
   11850:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11854:	0005883a 	mov	r2,zero
   11858:	f800283a 	ret

0001185c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1185c:	f800283a 	ret

00011860 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11860:	3005883a 	mov	r2,r6
   11864:	f800283a 	ret

00011868 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11868:	20000226 	beq	r4,zero,11874 <alt_dev_llist_insert+0xc>
   1186c:	20800217 	ldw	r2,8(r4)
   11870:	1000101e 	bne	r2,zero,118b4 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11874:	d0a00717 	ldw	r2,-32740(gp)
   11878:	10000926 	beq	r2,zero,118a0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1187c:	deffff04 	addi	sp,sp,-4
   11880:	dfc00015 	stw	ra,0(sp)
   11884:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11888:	00c00584 	movi	r3,22
   1188c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11890:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11894:	dfc00017 	ldw	ra,0(sp)
   11898:	dec00104 	addi	sp,sp,4
   1189c:	f800283a 	ret
   118a0:	d0a04404 	addi	r2,gp,-32496
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   118a4:	00c00584 	movi	r3,22
   118a8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   118ac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   118b0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   118b4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   118b8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   118bc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   118c0:	28800017 	ldw	r2,0(r5)
   118c4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   118c8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   118cc:	0005883a 	mov	r2,zero
   118d0:	f800283a 	ret

000118d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   118d4:	defffb04 	addi	sp,sp,-20
   118d8:	dcc00315 	stw	r19,12(sp)
   118dc:	dc800215 	stw	r18,8(sp)
   118e0:	dc400115 	stw	r17,4(sp)
   118e4:	dc000015 	stw	r16,0(sp)
   118e8:	dfc00415 	stw	ra,16(sp)
   118ec:	2027883a 	mov	r19,r4
   118f0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   118f4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   118f8:	00119f80 	call	119f8 <strlen>
   118fc:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11900:	84400726 	beq	r16,r17,11920 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11904:	81000217 	ldw	r4,8(r16)
   11908:	900d883a 	mov	r6,r18
   1190c:	980b883a 	mov	r5,r19
   11910:	00119c80 	call	119c8 <memcmp>
   11914:	10000426 	beq	r2,zero,11928 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11918:	84000017 	ldw	r16,0(r16)
   1191c:	003ff806 	br	11900 <__alt_data_end+0xffff1900>
  }
  
  /* No match found */
  
  return NULL;
   11920:	0005883a 	mov	r2,zero
   11924:	00000106 	br	1192c <alt_find_dev+0x58>
   11928:	8005883a 	mov	r2,r16
}
   1192c:	dfc00417 	ldw	ra,16(sp)
   11930:	dcc00317 	ldw	r19,12(sp)
   11934:	dc800217 	ldw	r18,8(sp)
   11938:	dc400117 	ldw	r17,4(sp)
   1193c:	dc000017 	ldw	r16,0(sp)
   11940:	dec00504 	addi	sp,sp,20
   11944:	f800283a 	ret

00011948 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11948:	f800283a 	ret

0001194c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1194c:	000170fa 	wrctl	ienable,zero
   11950:	f800283a 	ret

00011954 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11954:	213ffe84 	addi	r4,r4,-6
   11958:	008003c4 	movi	r2,15
   1195c:	11001636 	bltu	r2,r4,119b8 <alt_exception_cause_generated_bad_addr+0x64>
   11960:	200890ba 	slli	r4,r4,2
   11964:	00800074 	movhi	r2,1
   11968:	10865e04 	addi	r2,r2,6520
   1196c:	2089883a 	add	r4,r4,r2
   11970:	20800017 	ldw	r2,0(r4)
   11974:	1000683a 	jmp	r2
   11978:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
   1197c:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
   11980:	000119b8 	rdprs	zero,zero,1126
   11984:	000119b8 	rdprs	zero,zero,1126
   11988:	000119b8 	rdprs	zero,zero,1126
   1198c:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
   11990:	000119b8 	rdprs	zero,zero,1126
   11994:	000119b8 	rdprs	zero,zero,1126
   11998:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
   1199c:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
   119a0:	000119b8 	rdprs	zero,zero,1126
   119a4:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
   119a8:	000119b8 	rdprs	zero,zero,1126
   119ac:	000119b8 	rdprs	zero,zero,1126
   119b0:	000119b8 	rdprs	zero,zero,1126
   119b4:	000119c0 	call	119c <__alt_mem_onchip_memory-0xee64>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   119b8:	0005883a 	mov	r2,zero
   119bc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   119c0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   119c4:	f800283a 	ret

000119c8 <memcmp>:
   119c8:	218d883a 	add	r6,r4,r6
   119cc:	21800826 	beq	r4,r6,119f0 <memcmp+0x28>
   119d0:	20800003 	ldbu	r2,0(r4)
   119d4:	28c00003 	ldbu	r3,0(r5)
   119d8:	10c00226 	beq	r2,r3,119e4 <memcmp+0x1c>
   119dc:	10c5c83a 	sub	r2,r2,r3
   119e0:	f800283a 	ret
   119e4:	21000044 	addi	r4,r4,1
   119e8:	29400044 	addi	r5,r5,1
   119ec:	003ff706 	br	119cc <__alt_data_end+0xffff19cc>
   119f0:	0005883a 	mov	r2,zero
   119f4:	f800283a 	ret

000119f8 <strlen>:
   119f8:	2005883a 	mov	r2,r4
   119fc:	10c00007 	ldb	r3,0(r2)
   11a00:	18000226 	beq	r3,zero,11a0c <strlen+0x14>
   11a04:	10800044 	addi	r2,r2,1
   11a08:	003ffc06 	br	119fc <__alt_data_end+0xffff19fc>
   11a0c:	1105c83a 	sub	r2,r2,r4
   11a10:	f800283a 	ret
